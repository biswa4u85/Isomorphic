{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/@iso/containers/Tables/AntTables/TableViews/EditView.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clone from 'clone';\nimport TableWrapper from '../AntTables.styles';\nimport { EditableCell, DeleteCell } from '@iso/components/Tables/HelperCells';\nexport default function (props) {\n  const [state, setState] = React.useState({\n    columns: createcolumns(clone(props.tableInfo.columns)),\n    dataList: props.dataList.getAll()\n  });\n  const {\n    columns,\n    dataList\n  } = state;\n\n  function createcolumns(columns) {\n    const editColumnRender = (text, record, index) => __jsx(EditableCell, {\n      index: index,\n      columnsKey: columns[1].key,\n      value: text[columns[1].key],\n      onChange: onCellChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n\n    columns[1].render = editColumnRender;\n    const deleteColumn = {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => __jsx(DeleteCell, {\n        index: index,\n        onDeleteCell: onDeleteCell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })\n    };\n    columns.push(deleteColumn);\n    return columns;\n  }\n\n  function onCellChange(value, columnsKey, index) {\n    dataList[index][columnsKey] = value;\n    setState(_objectSpread({}, state, {\n      dataList\n    }));\n  }\n\n  function onDeleteCell(index) {\n    dataList.splice(index, 1);\n    setState(_objectSpread({}, state, {\n      dataList\n    }));\n  }\n\n  return __jsx(TableWrapper, {\n    columns: columns,\n    dataSource: dataList,\n    pagination: {\n      pageSize: 5\n    },\n    className: \"isoEditableTable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/@iso/containers/Tables/AntTables/TableViews/EditView.js"],"names":["React","clone","TableWrapper","EditableCell","DeleteCell","props","state","setState","useState","columns","createcolumns","tableInfo","dataList","getAll","editColumnRender","text","record","index","key","onCellChange","render","deleteColumn","title","dataIndex","onDeleteCell","push","value","columnsKey","splice","pageSize"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,oCAAzC;AAEA,eAAe,UAASC,KAAT,EAAgB;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACQ,QAAN,CAAe;AACvCC,IAAAA,OAAO,EAAEC,aAAa,CAACT,KAAK,CAACI,KAAK,CAACM,SAAN,CAAgBF,OAAjB,CAAN,CADiB;AAEvCG,IAAAA,QAAQ,EAAEP,KAAK,CAACO,QAAN,CAAeC,MAAf;AAF6B,GAAf,CAA1B;AAIA,QAAM;AAAEJ,IAAAA,OAAF;AAAWG,IAAAA;AAAX,MAAwBN,KAA9B;;AAEA,WAASI,aAAT,CAAuBD,OAAvB,EAAgC;AAC9B,UAAMK,gBAAgB,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,KACvB,MAAC,YAAD;AACE,MAAA,KAAK,EAAEA,KADT;AAEE,MAAA,UAAU,EAAER,OAAO,CAAC,CAAD,CAAP,CAAWS,GAFzB;AAGE,MAAA,KAAK,EAAEH,IAAI,CAACN,OAAO,CAAC,CAAD,CAAP,CAAWS,GAAZ,CAHb;AAIE,MAAA,QAAQ,EAAEC,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;;AAQAV,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWW,MAAX,GAAoBN,gBAApB;AACA,UAAMO,YAAY,GAAG;AACnBC,MAAAA,KAAK,EAAE,WADY;AAEnBC,MAAAA,SAAS,EAAE,WAFQ;AAGnBH,MAAAA,MAAM,EAAE,CAACL,IAAD,EAAOC,MAAP,EAAeC,KAAf,KACN,MAAC,UAAD;AAAY,QAAA,KAAK,EAAEA,KAAnB;AAA0B,QAAA,YAAY,EAAEO,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJiB,KAArB;AAOAf,IAAAA,OAAO,CAACgB,IAAR,CAAaJ,YAAb;AACA,WAAOZ,OAAP;AACD;;AACD,WAASU,YAAT,CAAsBO,KAAtB,EAA6BC,UAA7B,EAAyCV,KAAzC,EAAgD;AAC9CL,IAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBU,UAAhB,IAA8BD,KAA9B;AACAnB,IAAAA,QAAQ,mBAAMD,KAAN;AAAaM,MAAAA;AAAb,OAAR;AACD;;AACD,WAASY,YAAT,CAAsBP,KAAtB,EAA6B;AAC3BL,IAAAA,QAAQ,CAACgB,MAAT,CAAgBX,KAAhB,EAAuB,CAAvB;AACAV,IAAAA,QAAQ,mBAAMD,KAAN;AAAaM,MAAAA;AAAb,OAAR;AACD;;AAED,SACE,MAAC,YAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,UAAU,EAAEG,QAFd;AAGE,IAAA,UAAU,EAAE;AAAEiB,MAAAA,QAAQ,EAAE;AAAZ,KAHd;AAIE,IAAA,SAAS,EAAC,kBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD","sourcesContent":["import React from 'react';\nimport clone from 'clone';\nimport TableWrapper from '../AntTables.styles';\nimport { EditableCell, DeleteCell } from '@iso/components/Tables/HelperCells';\n\nexport default function(props) {\n  const [state, setState] = React.useState({\n    columns: createcolumns(clone(props.tableInfo.columns)),\n    dataList: props.dataList.getAll(),\n  });\n  const { columns, dataList } = state;\n\n  function createcolumns(columns) {\n    const editColumnRender = (text, record, index) => (\n      <EditableCell\n        index={index}\n        columnsKey={columns[1].key}\n        value={text[columns[1].key]}\n        onChange={onCellChange}\n      />\n    );\n    columns[1].render = editColumnRender;\n    const deleteColumn = {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => (\n        <DeleteCell index={index} onDeleteCell={onDeleteCell} />\n      ),\n    };\n    columns.push(deleteColumn);\n    return columns;\n  }\n  function onCellChange(value, columnsKey, index) {\n    dataList[index][columnsKey] = value;\n    setState({ ...state, dataList });\n  }\n  function onDeleteCell(index) {\n    dataList.splice(index, 1);\n    setState({ ...state, dataList });\n  }\n\n  return (\n    <TableWrapper\n      columns={columns}\n      dataSource={dataList}\n      pagination={{ pageSize: 5 }}\n      className=\"isoEditableTable\"\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}