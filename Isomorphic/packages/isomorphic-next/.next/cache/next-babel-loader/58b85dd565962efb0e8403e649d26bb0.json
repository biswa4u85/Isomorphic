{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport firebase, { auth } from './firebase';\nexport const getCurrentUser = () => {\n  return new _Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nexport const githubProvider = new firebase.auth.GithubAuthProvider();\nexport const twitterProvider = new firebase.auth.TwitterAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider).then(function (result) {\n  // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n  var token = result.credential.accessToken; // The signed-in user info.\n\n  var user = result.user;\n  console.log(`FB Token: ${token}`, `User: ${user}`); // ...\n}).catch(function (error) {\n  // Handle Errors here.\n  console.error(error); // ...\n});\nexport const signInWithGithub = () => auth.signInWithPopup(githubProvider);\nexport const signInWithTwitter = () => auth.signInWithPopup(twitterProvider);\nexport const signInWithEmail = async (email, password) => await auth.signInWithEmailAndPassword(email, password);\nexport const signUpWithEmailAndPassword = async (email, password) => await auth.createUserWithEmailAndPassword(email, password);\nexport const resetPassword = email => auth.sendPasswordResetEmail(email);\nexport const signOut = () => auth.signOut();\nexport default auth;","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/@iso/lib/firebase/firebase.authentication.util.js"],"names":["firebase","auth","getCurrentUser","resolve","reject","unsubscribe","onAuthStateChanged","userAuth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","facebookProvider","FacebookAuthProvider","githubProvider","GithubAuthProvider","twitterProvider","TwitterAuthProvider","signInWithGoogle","signInWithPopup","signInWithFacebook","then","result","token","credential","accessToken","user","console","log","catch","error","signInWithGithub","signInWithTwitter","signInWithEmail","email","password","signInWithEmailAndPassword","signUpWithEmailAndPassword","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","signOut"],"mappings":";AAAA,OAAOA,QAAP,IAAmBC,IAAnB,QAA+B,YAA/B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,WAAW,GAAGJ,IAAI,CAACK,kBAAL,CAAwBC,QAAQ,IAAI;AACtDF,MAAAA,WAAW;AACXF,MAAAA,OAAO,CAACI,QAAD,CAAP;AACD,KAHmB,EAGjBH,MAHiB,CAApB;AAID,GALM,CAAP;AAMD,CAPM;AAQP,OAAO,MAAMI,cAAc,GAAG,IAAIR,QAAQ,CAACC,IAAT,CAAcQ,kBAAlB,EAAvB;AACPD,cAAc,CAACE,mBAAf,CAAmC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnC;AACA,OAAO,MAAMC,gBAAgB,GAAG,IAAIZ,QAAQ,CAACC,IAAT,CAAcY,oBAAlB,EAAzB;AACP,OAAO,MAAMC,cAAc,GAAG,IAAId,QAAQ,CAACC,IAAT,CAAcc,kBAAlB,EAAvB;AACP,OAAO,MAAMC,eAAe,GAAG,IAAIhB,QAAQ,CAACC,IAAT,CAAcgB,mBAAlB,EAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAG,MAAMjB,IAAI,CAACkB,eAAL,CAAqBX,cAArB,CAA/B;AACP,OAAO,MAAMY,kBAAkB,GAAG,MAChCnB,IAAI,CACDkB,eADH,CACmBP,gBADnB,EAEGS,IAFH,CAEQ,UAASC,MAAT,EAAiB;AACrB;AACA,MAAIC,KAAK,GAAGD,MAAM,CAACE,UAAP,CAAkBC,WAA9B,CAFqB,CAGrB;;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,aAAYL,KAAM,EAA/B,EAAmC,SAAQG,IAAK,EAAhD,EALqB,CAOrB;AACD,CAVH,EAWGG,KAXH,CAWS,UAASC,KAAT,EAAgB;AACrB;AACAH,EAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd,EAFqB,CAIrB;AACD,CAhBH,CADK;AAkBP,OAAO,MAAMC,gBAAgB,GAAG,MAAM9B,IAAI,CAACkB,eAAL,CAAqBL,cAArB,CAA/B;AACP,OAAO,MAAMkB,iBAAiB,GAAG,MAAM/B,IAAI,CAACkB,eAAL,CAAqBH,eAArB,CAAhC;AACP,OAAO,MAAMiB,eAAe,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAC7B,MAAMlC,IAAI,CAACmC,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CADD;AAEP,OAAO,MAAME,0BAA0B,GAAG,OAAOH,KAAP,EAAcC,QAAd,KACxC,MAAMlC,IAAI,CAACqC,8BAAL,CAAoCJ,KAApC,EAA2CC,QAA3C,CADD;AAGP,OAAO,MAAMI,aAAa,GAAGL,KAAK,IAAIjC,IAAI,CAACuC,sBAAL,CAA4BN,KAA5B,CAA/B;AAEP,OAAO,MAAMO,OAAO,GAAG,MAAMxC,IAAI,CAACwC,OAAL,EAAtB;AACP,eAAexC,IAAf","sourcesContent":["import firebase, { auth } from './firebase';\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nexport const githubProvider = new firebase.auth.GithubAuthProvider();\nexport const twitterProvider = new firebase.auth.TwitterAuthProvider();\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport const signInWithFacebook = () =>\n  auth\n    .signInWithPopup(facebookProvider)\n    .then(function(result) {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      var token = result.credential.accessToken;\n      // The signed-in user info.\n      var user = result.user;\n      console.log(`FB Token: ${token}`, `User: ${user}`);\n\n      // ...\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      console.error(error);\n\n      // ...\n    });\nexport const signInWithGithub = () => auth.signInWithPopup(githubProvider);\nexport const signInWithTwitter = () => auth.signInWithPopup(twitterProvider);\nexport const signInWithEmail = async (email, password) =>\n  await auth.signInWithEmailAndPassword(email, password);\nexport const signUpWithEmailAndPassword = async (email, password) =>\n  await auth.createUserWithEmailAndPassword(email, password);\n\nexport const resetPassword = email => auth.sendPasswordResetEmail(email);\n\nexport const signOut = () => auth.signOut();\nexport default auth;\n"]},"metadata":{},"sourceType":"module"}