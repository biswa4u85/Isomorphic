{"ast":null,"code":"import \"antd/es/icon/style/css\";\nimport _Icon from \"antd/es/icon\";\nimport _defineProperty from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Board/Board.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Column from '../Column/Column';\nimport { reorder, reorderTasks } from '@iso/lib/helpers/reorder';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport { ParentContainer, Container, AddListButton } from './Board.style';\nimport { filterSearchedComponents } from '@iso/lib/helpers/searchTaskCard';\nimport BoardLayout from './BoardLayout/BoardLayout';\nimport modalActions from '@iso/redux/modal/actions';\n\nfunction Board({\n  currentBoard,\n  openModal,\n  boards,\n  match,\n  columns,\n  moveColumnWatcher,\n  tasks,\n  moveTaskWatcher,\n  ordered,\n  containerHeight,\n  withScrollableColumns = true,\n  boardRenderWatcher\n}) {\n  useEffect(() => {\n    boardRenderWatcher(match.params.id);\n  }, [boardRenderWatcher, match.params.id]);\n\n  const onDragEnd = ({\n    source,\n    destination,\n    type,\n    draggableId\n  }) => {\n    // source= {\n    //   droppableId: 'column-1',\n    //   index: 0\n    // }\n    // destination= {\n    //   droppableId: 'column-1',\n    //   index: 1\n    // }\n    // type= \"TYPE\"\n    // draggableId: 'task-1'\n    // dropped nowhere\n    if (!destination) return; // did not move anywhere - can bail early\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    } // reordering column\n\n\n    if (type === 'COLUMN') {\n      const columnOrdered = reorder(ordered, source.index, destination.index);\n      moveColumnWatcher({\n        board_id: match.params.id,\n        column_orders: columnOrdered\n      });\n      return;\n    }\n\n    const updatedColumns = reorderTasks({\n      columns,\n      source,\n      destination,\n      draggableId\n    });\n    const draggedTask = tasks[draggableId];\n\n    const updatedTask = _objectSpread({}, draggedTask, {\n      column_id: destination.droppableId\n    });\n\n    const updatedTasks = _objectSpread({}, tasks, {\n      [updatedTask.id]: updatedTask\n    });\n\n    moveTaskWatcher({\n      columns: updatedColumns,\n      tasks: updatedTasks\n    });\n  };\n\n  const board = React.createElement(Droppable, {\n    droppableId: \"board\",\n    type: \"COLUMN\",\n    direction: \"horizontal\",\n    ignoreContainerClipping: Boolean(containerHeight),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, provided => React.createElement(Container, Object.assign({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), ordered && ordered.map((columnId, index) => {\n    const column = columns[columnId];\n    const tasksWithinColumn = column.task_orders.map(task_id => tasks[task_id]);\n    return React.createElement(Column, {\n      key: columnId,\n      index: index,\n      title: column.title,\n      column: column,\n      boardId: match.params.id,\n      tasks: tasksWithinColumn,\n      isScrollable: withScrollableColumns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    });\n  }), React.createElement(AddListButton, {\n    onClick: () => openModal({\n      modalType: 'CREATE_COLUMN',\n      modalProps: {\n        boardId: match.params.id\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(_Icon, {\n    type: \"plus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), \" Add another list\")));\n  return React.createElement(BoardLayout, {\n    currentBoard: currentBoard,\n    boards: boards,\n    match: match,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, containerHeight ? React.createElement(ParentContainer, {\n    height: containerHeight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, board) : board));\n}\n\nexport default connect((state, ownProps) => {\n  return {\n    ordered: state.scrumBoard.boards && state.scrumBoard.boards[ownProps.match.params.id] && state.scrumBoard.boards[ownProps.match.params.id].column_orders,\n    state: state.scrumBoard,\n    boards: state.scrumBoard.boards,\n    currentBoard: state.scrumBoard.boards[ownProps.match.params.id],\n    columns: filterSearchedComponents(state.scrumBoard.tasks, state.scrumBoard.columns, state.scrumBoard.searchText),\n    tasks: state.scrumBoard.tasks\n  };\n}, _objectSpread({}, scrumBoardActions, {}, modalActions))(Board);","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Board/Board.js"],"names":["React","useEffect","connect","Column","reorder","reorderTasks","DragDropContext","Droppable","scrumBoardActions","ParentContainer","Container","AddListButton","filterSearchedComponents","BoardLayout","modalActions","Board","currentBoard","openModal","boards","match","columns","moveColumnWatcher","tasks","moveTaskWatcher","ordered","containerHeight","withScrollableColumns","boardRenderWatcher","params","id","onDragEnd","source","destination","type","draggableId","droppableId","index","columnOrdered","board_id","column_orders","updatedColumns","draggedTask","updatedTask","column_id","updatedTasks","board","Boolean","provided","innerRef","droppableProps","map","columnId","column","tasksWithinColumn","task_orders","task_id","title","modalType","modalProps","boardId","state","ownProps","scrumBoard","searchText"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Icon } from 'antd';\nimport Column from '../Column/Column';\nimport { reorder, reorderTasks } from '@iso/lib/helpers/reorder';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport { ParentContainer, Container, AddListButton } from './Board.style';\nimport { filterSearchedComponents } from '@iso/lib/helpers/searchTaskCard';\nimport BoardLayout from './BoardLayout/BoardLayout';\nimport modalActions from '@iso/redux/modal/actions';\n\nfunction Board({\n  currentBoard,\n  openModal,\n  boards,\n  match,\n  columns,\n  moveColumnWatcher,\n  tasks,\n  moveTaskWatcher,\n  ordered,\n  containerHeight,\n  withScrollableColumns = true,\n  boardRenderWatcher,\n}) {\n  useEffect(() => {\n    boardRenderWatcher(match.params.id);\n  }, [boardRenderWatcher, match.params.id]);\n  const onDragEnd = ({ source, destination, type, draggableId }) => {\n    // source= {\n    //   droppableId: 'column-1',\n    //   index: 0\n    // }\n    // destination= {\n    //   droppableId: 'column-1',\n    //   index: 1\n    // }\n    // type= \"TYPE\"\n    // draggableId: 'task-1'\n\n    // dropped nowhere\n    if (!destination) return;\n    // did not move anywhere - can bail early\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n\n    // reordering column\n    if (type === 'COLUMN') {\n      const columnOrdered = reorder(ordered, source.index, destination.index);\n      moveColumnWatcher({\n        board_id: match.params.id,\n        column_orders: columnOrdered,\n      });\n      return;\n    }\n\n    const updatedColumns = reorderTasks({\n      columns,\n      source,\n      destination,\n      draggableId,\n    });\n    const draggedTask = tasks[draggableId];\n    const updatedTask = {\n      ...draggedTask,\n      column_id: destination.droppableId,\n    };\n    const updatedTasks = {\n      ...tasks,\n      [updatedTask.id]: updatedTask,\n    };\n    moveTaskWatcher({ columns: updatedColumns, tasks: updatedTasks });\n  };\n\n  const board = (\n    <Droppable\n      droppableId=\"board\"\n      type=\"COLUMN\"\n      direction=\"horizontal\"\n      ignoreContainerClipping={Boolean(containerHeight)}\n    >\n      {provided => (\n        <Container ref={provided.innerRef} {...provided.droppableProps}>\n          {ordered &&\n            ordered.map((columnId, index) => {\n              const column = columns[columnId];\n              const tasksWithinColumn = column.task_orders.map(\n                task_id => tasks[task_id]\n              );\n\n              return (\n                <Column\n                  key={columnId}\n                  index={index}\n                  title={column.title}\n                  column={column}\n                  boardId={match.params.id}\n                  tasks={tasksWithinColumn}\n                  isScrollable={withScrollableColumns}\n                />\n              );\n            })}\n          <AddListButton\n            onClick={() =>\n              openModal({\n                modalType: 'CREATE_COLUMN',\n                modalProps: { boardId: match.params.id },\n              })\n            }\n          >\n            <Icon type=\"plus\" /> Add another list\n          </AddListButton>\n        </Container>\n      )}\n    </Droppable>\n  );\n\n  return (\n    <BoardLayout currentBoard={currentBoard} boards={boards} match={match}>\n      <DragDropContext onDragEnd={onDragEnd}>\n        {containerHeight ? (\n          <ParentContainer height={containerHeight}>{board}</ParentContainer>\n        ) : (\n          board\n        )}\n      </DragDropContext>\n    </BoardLayout>\n  );\n}\n\nexport default connect(\n  (state, ownProps) => {\n    return {\n      ordered:\n        state.scrumBoard.boards &&\n        state.scrumBoard.boards[ownProps.match.params.id] &&\n        state.scrumBoard.boards[ownProps.match.params.id].column_orders,\n      state: state.scrumBoard,\n      boards: state.scrumBoard.boards,\n      currentBoard: state.scrumBoard.boards[ownProps.match.params.id],\n      columns: filterSearchedComponents(\n        state.scrumBoard.tasks,\n        state.scrumBoard.columns,\n        state.scrumBoard.searchText\n      ),\n      tasks: state.scrumBoard.tasks,\n    };\n  },\n  { ...scrumBoardActions, ...modalActions }\n)(Board);\n"]},"metadata":{},"sourceType":"module"}