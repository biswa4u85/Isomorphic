{"ast":null,"code":"var _class, _temp;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar _require = require('preact'),\n    h = _require.h,\n    Component = _require.Component;\n\nvar AuthView = require('./AuthView');\n\nvar Browser = require('./Browser');\n\nvar LoaderView = require('./Loader');\n\nvar generateFileID = require('@uppy/utils/lib/generateFileID');\n\nvar getFileType = require('@uppy/utils/lib/getFileType');\n\nvar isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');\n/**\n * Array.prototype.findIndex ponyfill for old browsers.\n */\n\n\nfunction findIndex(array, predicate) {\n  for (var i = 0; i < array.length; i++) {\n    if (predicate(array[i])) return i;\n  }\n\n  return -1;\n} // location.origin does not exist in IE\n\n\nfunction getOrigin() {\n  if ('origin' in location) {\n    return location.origin; // eslint-disable-line compat/compat\n  }\n\n  return location.protocol + \"//\" + location.hostname + (location.port ? \":\" + location.port : '');\n}\n\nvar CloseWrapper =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(CloseWrapper, _Component);\n\n  function CloseWrapper() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = CloseWrapper.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.props.onUnmount();\n  };\n\n  _proto.render = function render() {\n    return this.props.children[0];\n  };\n\n  return CloseWrapper;\n}(Component);\n/**\n * Class to easily generate generic views for Provider plugins\n */\n\n\nmodule.exports = (_temp = _class =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {object} plugin instance of the plugin\n   * @param {object} opts\n   */\n  function ProviderView(plugin, opts) {\n    this.plugin = plugin;\n    this.provider = opts.provider; // set default options\n\n    var defaultOptions = {\n      viewType: 'list',\n      showTitles: true,\n      showFilter: true,\n      showBreadcrumbs: true // merge default options with the ones set by user\n\n    };\n    this.opts = _extends({}, defaultOptions, {}, opts); // Logic\n\n    this.addFile = this.addFile.bind(this);\n    this.filterItems = this.filterItems.bind(this);\n    this.filterQuery = this.filterQuery.bind(this);\n    this.toggleSearch = this.toggleSearch.bind(this);\n    this.getFolder = this.getFolder.bind(this);\n    this.getNextFolder = this.getNextFolder.bind(this);\n    this.logout = this.logout.bind(this);\n    this.preFirstRender = this.preFirstRender.bind(this);\n    this.handleAuth = this.handleAuth.bind(this);\n    this.sortByTitle = this.sortByTitle.bind(this);\n    this.sortByDate = this.sortByDate.bind(this);\n    this.isActiveRow = this.isActiveRow.bind(this);\n    this.isChecked = this.isChecked.bind(this);\n    this.toggleCheckbox = this.toggleCheckbox.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.listAllFiles = this.listAllFiles.bind(this);\n    this.donePicking = this.donePicking.bind(this);\n    this.cancelPicking = this.cancelPicking.bind(this);\n    this.clearSelection = this.clearSelection.bind(this); // Visual\n\n    this.render = this.render.bind(this);\n    this.clearSelection();\n  }\n\n  var _proto2 = ProviderView.prototype;\n\n  _proto2.tearDown = function tearDown() {// Nothing.\n  };\n\n  _proto2._updateFilesAndFolders = function _updateFilesAndFolders(res, files, folders) {\n    this.nextPagePath = res.nextPagePath;\n    res.items.forEach(function (item) {\n      if (item.isFolder) {\n        folders.push(item);\n      } else {\n        files.push(item);\n      }\n    });\n    this.plugin.setPluginState({\n      folders: folders,\n      files: files\n    });\n  }\n  /**\n   * Called only the first time the provider view is rendered.\n   * Kind of like an init function.\n   */\n  ;\n\n  _proto2.preFirstRender = function preFirstRender() {\n    this.plugin.setPluginState({\n      didFirstRender: true\n    });\n    this.plugin.onFirstRender();\n  }\n  /**\n   * Based on folder ID, fetch a new folder and update it to state\n   *\n   * @param  {string} id Folder id\n   * @returns {Promise}   Folders/files in folder\n   */\n  ;\n\n  _proto2.getFolder = function getFolder(id, name) {\n    var _this = this;\n\n    return this._loaderWrapper(this.provider.list(id), function (res) {\n      var folders = [];\n      var files = [];\n      var updatedDirectories;\n\n      var state = _this.plugin.getPluginState();\n\n      var index = findIndex(state.directories, function (dir) {\n        return id === dir.id;\n      });\n\n      if (index !== -1) {\n        updatedDirectories = state.directories.slice(0, index + 1);\n      } else {\n        updatedDirectories = state.directories.concat([{\n          id: id,\n          title: name\n        }]);\n      }\n\n      _this.username = _this.username ? _this.username : res.username;\n\n      _this._updateFilesAndFolders(res, files, folders);\n\n      _this.plugin.setPluginState({\n        directories: updatedDirectories\n      });\n    }, this.handleError);\n  }\n  /**\n   * Fetches new folder\n   *\n   * @param  {object} Folder\n   * @param  {string} title Folder title\n   */\n  ;\n\n  _proto2.getNextFolder = function getNextFolder(folder) {\n    this.getFolder(folder.requestPath, folder.name);\n    this.lastCheckbox = undefined;\n  };\n\n  _proto2.addFile = function addFile(file) {\n    var tagFile = {\n      id: this.providerFileToId(file),\n      source: this.plugin.id,\n      data: file,\n      name: file.name || file.id,\n      type: file.mimeType,\n      isRemote: true,\n      body: {\n        fileId: file.id\n      },\n      remote: {\n        companionUrl: this.plugin.opts.companionUrl,\n        url: \"\" + this.provider.fileUrl(file.requestPath),\n        body: {\n          fileId: file.id\n        },\n        providerOptions: this.provider.opts\n      }\n    };\n    var fileType = getFileType(tagFile); // TODO Should we just always use the thumbnail URL if it exists?\n\n    if (fileType && isPreviewSupported(fileType)) {\n      tagFile.preview = file.thumbnail;\n    }\n\n    this.plugin.uppy.log('Adding remote file');\n\n    try {\n      this.plugin.uppy.addFile(tagFile);\n    } catch (err) {\n      if (!err.isRestriction) {\n        this.plugin.uppy.log(err);\n      }\n    }\n  };\n\n  _proto2.removeFile = function removeFile(id) {\n    var _this$plugin$getPlugi = this.plugin.getPluginState(),\n        currentSelection = _this$plugin$getPlugi.currentSelection;\n\n    this.plugin.setPluginState({\n      currentSelection: currentSelection.filter(function (file) {\n        return file.id !== id;\n      })\n    });\n  }\n  /**\n   * Removes session token on client side.\n   */\n  ;\n\n  _proto2.logout = function logout() {\n    var _this2 = this;\n\n    this.provider.logout().then(function (res) {\n      if (res.ok) {\n        if (!res.revoked) {\n          var message = _this2.plugin.uppy.i18n('companionUnauthorizeHint', {\n            provider: _this2.plugin.title,\n            url: res.manual_revoke_url\n          });\n\n          _this2.plugin.uppy.info(message, 'info', 7000);\n        }\n\n        var newState = {\n          authenticated: false,\n          files: [],\n          folders: [],\n          directories: []\n        };\n\n        _this2.plugin.setPluginState(newState);\n      }\n    }).catch(this.handleError);\n  };\n\n  _proto2.filterQuery = function filterQuery(e) {\n    var state = this.plugin.getPluginState();\n    this.plugin.setPluginState(_extends({}, state, {\n      filterInput: e ? e.target.value : ''\n    }));\n  };\n\n  _proto2.toggleSearch = function toggleSearch(inputEl) {\n    var state = this.plugin.getPluginState();\n    this.plugin.setPluginState({\n      isSearchVisible: !state.isSearchVisible,\n      filterInput: ''\n    });\n  };\n\n  _proto2.filterItems = function filterItems(items) {\n    var state = this.plugin.getPluginState();\n\n    if (!state.filterInput || state.filterInput === '') {\n      return items;\n    }\n\n    return items.filter(function (folder) {\n      return folder.name.toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;\n    });\n  };\n\n  _proto2.sortByTitle = function sortByTitle() {\n    var state = _extends({}, this.plugin.getPluginState());\n\n    var files = state.files,\n        folders = state.folders,\n        sorting = state.sorting;\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      if (sorting === 'titleDescending') {\n        return fileB.name.localeCompare(fileA.name);\n      }\n\n      return fileA.name.localeCompare(fileB.name);\n    });\n    var sortedFolders = folders.sort(function (folderA, folderB) {\n      if (sorting === 'titleDescending') {\n        return folderB.name.localeCompare(folderA.name);\n      }\n\n      return folderA.name.localeCompare(folderB.name);\n    });\n    this.plugin.setPluginState(_extends({}, state, {\n      files: sortedFiles,\n      folders: sortedFolders,\n      sorting: sorting === 'titleDescending' ? 'titleAscending' : 'titleDescending'\n    }));\n  };\n\n  _proto2.sortByDate = function sortByDate() {\n    var state = _extends({}, this.plugin.getPluginState());\n\n    var files = state.files,\n        folders = state.folders,\n        sorting = state.sorting;\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      var a = new Date(fileA.modifiedDate);\n      var b = new Date(fileB.modifiedDate);\n\n      if (sorting === 'dateDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n    var sortedFolders = folders.sort(function (folderA, folderB) {\n      var a = new Date(folderA.modifiedDate);\n      var b = new Date(folderB.modifiedDate);\n\n      if (sorting === 'dateDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n    this.plugin.setPluginState(_extends({}, state, {\n      files: sortedFiles,\n      folders: sortedFolders,\n      sorting: sorting === 'dateDescending' ? 'dateAscending' : 'dateDescending'\n    }));\n  };\n\n  _proto2.sortBySize = function sortBySize() {\n    var state = _extends({}, this.plugin.getPluginState());\n\n    var files = state.files,\n        sorting = state.sorting; // check that plugin supports file sizes\n\n    if (!files.length || !this.plugin.getItemData(files[0]).size) {\n      return;\n    }\n\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      var a = fileA.size;\n      var b = fileB.size;\n\n      if (sorting === 'sizeDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n    this.plugin.setPluginState(_extends({}, state, {\n      files: sortedFiles,\n      sorting: sorting === 'sizeDescending' ? 'sizeAscending' : 'sizeDescending'\n    }));\n  };\n\n  _proto2.isActiveRow = function isActiveRow(file) {\n    return this.plugin.getPluginState().activeRow === this.plugin.getItemId(file);\n  };\n\n  _proto2.isChecked = function isChecked(file) {\n    var _this$plugin$getPlugi2 = this.plugin.getPluginState(),\n        currentSelection = _this$plugin$getPlugi2.currentSelection; // comparing id instead of the file object, because the reference to the object\n    // changes when we switch folders, and the file list is updated\n\n\n    return currentSelection.some(function (item) {\n      return item.id === file.id;\n    });\n  }\n  /**\n   * Adds all files found inside of specified folder.\n   *\n   * Uses separated state while folder contents are being fetched and\n   * mantains list of selected folders, which are separated from files.\n   */\n  ;\n\n  _proto2.addFolder = function addFolder(folder) {\n    var _this3 = this;\n\n    var folderId = this.providerFileToId(folder);\n    var state = this.plugin.getPluginState();\n    var folders = state.selectedFolders || {};\n\n    if (folderId in folders && folders[folderId].loading) {\n      return;\n    }\n\n    folders[folderId] = {\n      loading: true,\n      files: []\n    };\n    this.plugin.setPluginState({\n      selectedFolders: folders\n    });\n    return this.listAllFiles(folder.requestPath).then(function (files) {\n      files.forEach(function (file) {\n        _this3.addFile(file);\n      });\n      var ids = files.map(_this3.providerFileToId);\n      state = _this3.plugin.getPluginState();\n      state.selectedFolders[folderId] = {\n        loading: false,\n        files: ids\n      };\n\n      _this3.plugin.setPluginState({\n        selectedFolders: folders\n      });\n\n      var message;\n\n      if (files.length) {\n        message = _this3.plugin.uppy.i18n('folderAdded', {\n          smart_count: files.length,\n          folder: folder.name\n        });\n      } else {\n        message = _this3.plugin.uppy.i18n('emptyFolderAdded');\n      }\n\n      _this3.plugin.uppy.info(message);\n    }).catch(function (e) {\n      state = _this3.plugin.getPluginState();\n      delete state.selectedFolders[folderId];\n\n      _this3.plugin.setPluginState({\n        selectedFolders: state.selectedFolders\n      });\n\n      _this3.handleError(e);\n    });\n  }\n  /**\n   * Toggles file/folder checkbox to on/off state while updating files list.\n   *\n   * Note that some extra complexity comes from supporting shift+click to\n   * toggle multiple checkboxes at once, which is done by getting all files\n   * in between last checked file and current one.\n   */\n  ;\n\n  _proto2.toggleCheckbox = function toggleCheckbox(e, file) {\n    e.stopPropagation();\n    e.preventDefault();\n    e.currentTarget.focus();\n\n    var _this$plugin$getPlugi3 = this.plugin.getPluginState(),\n        folders = _this$plugin$getPlugi3.folders,\n        files = _this$plugin$getPlugi3.files;\n\n    var items = this.filterItems(folders.concat(files)); // Shift-clicking selects a single consecutive list of items\n    // starting at the previous click and deselects everything else.\n\n    if (this.lastCheckbox && e.shiftKey) {\n      var _currentSelection;\n\n      var prevIndex = items.indexOf(this.lastCheckbox);\n      var currentIndex = items.indexOf(file);\n\n      if (prevIndex < currentIndex) {\n        _currentSelection = items.slice(prevIndex, currentIndex + 1);\n      } else {\n        _currentSelection = items.slice(currentIndex, prevIndex + 1);\n      }\n\n      this.plugin.setPluginState({\n        currentSelection: _currentSelection\n      });\n      return;\n    }\n\n    this.lastCheckbox = file;\n\n    var _this$plugin$getPlugi4 = this.plugin.getPluginState(),\n        currentSelection = _this$plugin$getPlugi4.currentSelection;\n\n    if (this.isChecked(file)) {\n      this.plugin.setPluginState({\n        currentSelection: currentSelection.filter(function (item) {\n          return item.id !== file.id;\n        })\n      });\n    } else {\n      this.plugin.setPluginState({\n        currentSelection: currentSelection.concat([file])\n      });\n    }\n  };\n\n  _proto2.providerFileToId = function providerFileToId(file) {\n    return generateFileID({\n      data: file,\n      name: file.name || file.id,\n      type: file.mimeType\n    });\n  };\n\n  _proto2.handleAuth = function handleAuth() {\n    var _this4 = this;\n\n    var authState = btoa(JSON.stringify({\n      origin: getOrigin()\n    }));\n    var clientVersion = encodeURIComponent(\"@uppy/provider-views=\" + ProviderView.VERSION);\n    var link = this.provider.authUrl() + \"?state=\" + authState + \"&uppyVersions=\" + clientVersion;\n    var authWindow = window.open(link, '_blank');\n\n    var handleToken = function handleToken(e) {\n      if (!_this4._isOriginAllowed(e.origin, _this4.plugin.opts.companionAllowedHosts) || e.source !== authWindow) {\n        _this4.plugin.uppy.log(\"rejecting event from \" + e.origin + \" vs allowed pattern \" + _this4.plugin.opts.companionAllowedHosts);\n\n        return;\n      } // Check if it's a string before doing the JSON.parse to maintain support\n      // for older Companion versions that used object references\n\n\n      var data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data;\n\n      if (!data.token) {\n        _this4.plugin.uppy.log('did not receive token from auth window');\n\n        return;\n      }\n\n      authWindow.close();\n      window.removeEventListener('message', handleToken);\n\n      _this4.provider.setAuthToken(data.token);\n\n      _this4.preFirstRender();\n    };\n\n    window.addEventListener('message', handleToken);\n  };\n\n  _proto2._isOriginAllowed = function _isOriginAllowed(origin, allowedOrigin) {\n    var getRegex = function getRegex(value) {\n      if (typeof value === 'string') {\n        return new RegExp(\"^\" + value + \"$\");\n      } else if (value instanceof RegExp) {\n        return value;\n      }\n    };\n\n    var patterns = Array.isArray(allowedOrigin) ? allowedOrigin.map(getRegex) : [getRegex(allowedOrigin)];\n    return patterns.filter(function (pattern) {\n      return pattern != null;\n    }) // loose comparison to catch undefined\n    .some(function (pattern) {\n      return pattern.test(origin) || pattern.test(origin + \"/\");\n    }); // allowing for trailing '/'\n  };\n\n  _proto2.handleError = function handleError(error) {\n    var uppy = this.plugin.uppy;\n    uppy.log(error.toString());\n\n    if (error.isAuthError) {\n      return;\n    }\n\n    var message = uppy.i18n('companionError');\n    uppy.info({\n      message: message,\n      details: error.toString()\n    }, 'error', 5000);\n  };\n\n  _proto2.handleScroll = function handleScroll(e) {\n    var _this5 = this;\n\n    var scrollPos = e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight);\n    var path = this.nextPagePath || null;\n\n    if (scrollPos < 50 && path && !this._isHandlingScroll) {\n      this.provider.list(path).then(function (res) {\n        var _this5$plugin$getPlug = _this5.plugin.getPluginState(),\n            files = _this5$plugin$getPlug.files,\n            folders = _this5$plugin$getPlug.folders;\n\n        _this5._updateFilesAndFolders(res, files, folders);\n      }).catch(this.handleError).then(function () {\n        _this5._isHandlingScroll = false;\n      }); // always called\n\n      this._isHandlingScroll = true;\n    }\n  };\n\n  _proto2.listAllFiles = function listAllFiles(path, files) {\n    var _this6 = this;\n\n    if (files === void 0) {\n      files = null;\n    }\n\n    files = files || [];\n    return new Promise(function (resolve, reject) {\n      _this6.provider.list(path).then(function (res) {\n        res.items.forEach(function (item) {\n          if (!item.isFolder) {\n            files.push(item);\n          }\n        });\n        var moreFiles = res.nextPagePath || null;\n\n        if (moreFiles) {\n          return _this6.listAllFiles(moreFiles, files).then(function (files) {\n            return resolve(files);\n          }).catch(function (e) {\n            return reject(e);\n          });\n        } else {\n          return resolve(files);\n        }\n      }).catch(function (e) {\n        return reject(e);\n      });\n    });\n  };\n\n  _proto2.donePicking = function donePicking() {\n    var _this7 = this;\n\n    var _this$plugin$getPlugi5 = this.plugin.getPluginState(),\n        currentSelection = _this$plugin$getPlugi5.currentSelection;\n\n    var promises = currentSelection.map(function (file) {\n      if (file.isFolder) {\n        return _this7.addFolder(file);\n      } else {\n        return _this7.addFile(file);\n      }\n    });\n\n    this._loaderWrapper(Promise.all(promises), function () {\n      _this7.clearSelection();\n    }, function () {});\n  };\n\n  _proto2.cancelPicking = function cancelPicking() {\n    this.clearSelection();\n    var dashboard = this.plugin.uppy.getPlugin('Dashboard');\n    if (dashboard) dashboard.hideAllPanels();\n  };\n\n  _proto2.clearSelection = function clearSelection() {\n    this.plugin.setPluginState({\n      currentSelection: []\n    });\n  } // displays loader view while asynchronous request is being made.\n  ;\n\n  _proto2._loaderWrapper = function _loaderWrapper(promise, then, catch_) {\n    var _this8 = this;\n\n    promise.then(function (result) {\n      _this8.plugin.setPluginState({\n        loading: false\n      });\n\n      then(result);\n    }).catch(function (err) {\n      _this8.plugin.setPluginState({\n        loading: false\n      });\n\n      catch_(err);\n    });\n    this.plugin.setPluginState({\n      loading: true\n    });\n  };\n\n  _proto2.render = function render(state) {\n    var _this$plugin$getPlugi6 = this.plugin.getPluginState(),\n        authenticated = _this$plugin$getPlugi6.authenticated,\n        didFirstRender = _this$plugin$getPlugi6.didFirstRender;\n\n    if (!didFirstRender) {\n      this.preFirstRender();\n    } // reload pluginState for \"loading\" attribute because it might\n    // have changed above.\n\n\n    if (this.plugin.getPluginState().loading) {\n      return h(CloseWrapper, {\n        onUnmount: this.clearSelection\n      }, h(LoaderView, {\n        i18n: this.plugin.uppy.i18n\n      }));\n    }\n\n    if (!authenticated) {\n      return h(CloseWrapper, {\n        onUnmount: this.clearSelection\n      }, h(AuthView, {\n        pluginName: this.plugin.title,\n        pluginIcon: this.plugin.icon,\n        handleAuth: this.handleAuth,\n        i18n: this.plugin.uppy.i18n,\n        i18nArray: this.plugin.uppy.i18nArray\n      }));\n    }\n\n    var browserProps = _extends({}, this.plugin.getPluginState(), {\n      username: this.username,\n      getNextFolder: this.getNextFolder,\n      getFolder: this.getFolder,\n      filterItems: this.filterItems,\n      filterQuery: this.filterQuery,\n      toggleSearch: this.toggleSearch,\n      sortByTitle: this.sortByTitle,\n      sortByDate: this.sortByDate,\n      logout: this.logout,\n      isActiveRow: this.isActiveRow,\n      isChecked: this.isChecked,\n      toggleCheckbox: this.toggleCheckbox,\n      handleScroll: this.handleScroll,\n      listAllFiles: this.listAllFiles,\n      done: this.donePicking,\n      cancel: this.cancelPicking,\n      title: this.plugin.title,\n      viewType: this.opts.viewType,\n      showTitles: this.opts.showTitles,\n      showFilter: this.opts.showFilter,\n      showBreadcrumbs: this.opts.showBreadcrumbs,\n      pluginIcon: this.plugin.icon,\n      i18n: this.plugin.uppy.i18n\n    });\n\n    return h(CloseWrapper, {\n      onUnmount: this.clearSelection\n    }, h(Browser, browserProps));\n  };\n\n  return ProviderView;\n}(), _class.VERSION = \"1.4.0\", _temp);","map":null,"metadata":{},"sourceType":"script"}