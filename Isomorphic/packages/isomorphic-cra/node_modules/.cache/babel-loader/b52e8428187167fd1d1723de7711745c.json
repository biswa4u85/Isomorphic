{"ast":null,"code":"import \"antd/es/row/style/css\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/tooltip/style/css\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/badge/style/css\";\nimport _Badge from \"antd/es/badge\";\nimport \"antd/es/col/style/css\";\nimport _Col from \"antd/es/col\";\nimport _defineProperty from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Task/TaskDetails/TaskDetials.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport Comments from '@iso/components/ScrumBoard/Comments/Comments';\nimport HeadingWithIcon from '@iso/components/ScrumBoard/HeadingWithIcon/HeadingWithIcon';\nimport { IconSvg } from '@iso/components/ScrumBoard/IconSvg/IconSvg';\nimport CardDetailsHeader from './TaskDetailsHeader';\nimport { CardDetailsWrapper, AttachmentWrapper, TaskName, TaskDescription, ClockIcon } from '../Task.style';\nimport PlusIcon from \"@iso/assets/images/icon/24.svg\";\nimport TitleIcon from \"@iso/assets/images/icon/05-icon.svg\";\nimport DescriptionIcon from \"@iso/assets/images/icon/06-icon.svg\";\nimport AttachmentIcon from \"@iso/assets/images/icon/01-icon.svg\";\nimport Clock from \"@iso/assets/images/icon/17.svg\";\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\n\nconst TaskDetials = ({\n  task,\n  deleteTaskWatcher,\n  editTask,\n  closeDrawer,\n  openDrawer,\n  columnId\n}) => {\n  return React.createElement(CardDetailsWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(CardDetailsHeader, {\n    onBtnClick: () => {\n      editTask(task);\n      openDrawer({\n        drawerType: 'CREATE_OR_EDIT_TASK',\n        drawerProps: {\n          initials: _objectSpread({}, task, {\n            editing: true\n          }),\n          columnId: columnId\n        }\n      });\n    },\n    onIconClick: closeDrawer,\n    onDelete: () => {\n      deleteTaskWatcher({\n        task_id: task.id,\n        column_id: columnId\n      });\n      closeDrawer();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(HeadingWithIcon, {\n    heading: \"Task Name\",\n    iconSrc: TitleIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(TaskName, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, task.title), React.createElement(_Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(_Col, {\n    span: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(HeadingWithIcon, {\n    heading: \"Assigned Members\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, task.assignees.map(assignee => React.createElement(Fragment, {\n    key: assignee,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, !assignee ? React.createElement(IconSvg, {\n    src: PlusIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }) : React.createElement(IconSvg, {\n    src: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\n    padding: '0',\n    radius: '10% 30% 25%',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }))))), React.createElement(_Col, {\n    span: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(HeadingWithIcon, {\n    heading: \"Labels\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, task.labels.map(label => React.createElement(_Tooltip, {\n    title: \"\".concat(label[0].toUpperCase()).concat(label.slice(1)),\n    placement: \"bottom\",\n    key: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(_Badge, {\n    status: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))))), React.createElement(_Col, {\n    span: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(HeadingWithIcon, {\n    heading: \"Due Date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(ClockIcon, {\n    src: Clock,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), moment(task.due_date).format('ddd d, YYYY'))), React.createElement(\"div\", {\n    style: {\n      clear: 'both',\n      paddingTop: '30px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(HeadingWithIcon, {\n    heading: \"Description\",\n    iconSrc: DescriptionIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(TaskDescription, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, task.description)), React.createElement(AttachmentWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(HeadingWithIcon, {\n    heading: \"Attachments\",\n    iconSrc: AttachmentIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(Comments, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n};\n\nexport default connect(null, _objectSpread({}, scrumBoardActions))(TaskDetials);","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Task/TaskDetails/TaskDetials.js"],"names":["React","Fragment","connect","moment","Comments","HeadingWithIcon","IconSvg","CardDetailsHeader","CardDetailsWrapper","AttachmentWrapper","TaskName","TaskDescription","ClockIcon","scrumBoardActions","TaskDetials","task","deleteTaskWatcher","editTask","closeDrawer","openDrawer","columnId","drawerType","drawerProps","initials","editing","task_id","id","column_id","TitleIcon","title","assignees","map","assignee","PlusIcon","labels","label","toUpperCase","slice","Clock","due_date","format","clear","paddingTop","DescriptionIcon","description","AttachmentIcon"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,8CAArB;AACA,OAAOC,eAAP,MAA4B,4DAA5B;AACA,SAASC,OAAT,QAAwB,4CAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SACEC,kBADF,EAEEC,iBAFF,EAGEC,QAHF,EAIEC,eAJF,EAKEC,SALF,QAMO,eANP;;;;;;AAYA,OAAOC,iBAAP,MAA8B,+BAA9B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,iBAFmB;AAGnBC,EAAAA,QAHmB;AAInBC,EAAAA,WAJmB;AAKnBC,EAAAA,UALmB;AAMnBC,EAAAA;AANmB,CAAD,KAOd;AACJ,SACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AACE,IAAA,UAAU,EAAE,MAAM;AAChBH,MAAAA,QAAQ,CAACF,IAAD,CAAR;AACAI,MAAAA,UAAU,CAAC;AACTE,QAAAA,UAAU,EAAE,qBADH;AAETC,QAAAA,WAAW,EAAE;AACXC,UAAAA,QAAQ,oBAAOR,IAAP;AAAaS,YAAAA,OAAO,EAAE;AAAtB,YADG;AAEXJ,UAAAA,QAAQ,EAAEA;AAFC;AAFJ,OAAD,CAAV;AAOD,KAVH;AAWE,IAAA,WAAW,EAAEF,WAXf;AAYE,IAAA,QAAQ,EAAE,MAAM;AACdF,MAAAA,iBAAiB,CAAC;AAChBS,QAAAA,OAAO,EAAEV,IAAI,CAACW,EADE;AAEhBC,QAAAA,SAAS,EAAEP;AAFK,OAAD,CAAjB;AAIAF,MAAAA,WAAW;AACZ,KAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAqBE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,WAAzB;AAAqC,IAAA,OAAO,EAAEU,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,EAsBE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWb,IAAI,CAACc,KAAhB,CAtBF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,kBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,IAAI,CAACe,SAAL,CAAeC,GAAf,CAAmBC,QAAQ,IAC1B,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACA,QAAD,GACC,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,oBAAC,OAAD;AACE,IAAA,GAAG,EACD,kEAFJ;AAIE,IAAA,OAAO,EAAE,GAJX;AAKE,IAAA,MAAM,EAAE,aALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADD,CADH,CAFF,CADF,EAqBE;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,IAAI,CAACmB,MAAL,CAAYH,GAAZ,CAAgBI,KAAK,IACpB;AACE,IAAA,KAAK,YAAKA,KAAK,CAAC,CAAD,CAAL,CAASC,WAAT,EAAL,SAA8BD,KAAK,CAACE,KAAN,CAAY,CAAZ,CAA9B,CADP;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,GAAG,EAAEF,KAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAO,IAAA,MAAM,EAAEA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADD,CADH,CAFF,CArBF,EAmCE;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAEG,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGnC,MAAM,CAACY,IAAI,CAACwB,QAAN,CAAN,CAAsBC,MAAtB,CAA6B,aAA7B,CAHH,CAnCF,CAvBF,EAgEE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,UAAU,EAAE;AAA7B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,aAAzB;AAAuC,IAAA,OAAO,EAAEC,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkB5B,IAAI,CAAC6B,WAAvB,CAFF,CAhEF,EAoEE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,aAAzB;AAAuC,IAAA,OAAO,EAAEC,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CApEF,EAuEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvEF,CADF;AA2ED,CAnFD;;AAoFA,eAAe3C,OAAO,CACpB,IADoB,oBAEfW,iBAFe,EAAP,CAGbC,WAHa,CAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Badge, Row, Col, Tooltip } from 'antd';\nimport moment from 'moment';\nimport Comments from '@iso/components/ScrumBoard/Comments/Comments';\nimport HeadingWithIcon from '@iso/components/ScrumBoard/HeadingWithIcon/HeadingWithIcon';\nimport { IconSvg } from '@iso/components/ScrumBoard/IconSvg/IconSvg';\nimport CardDetailsHeader from './TaskDetailsHeader';\nimport {\n  CardDetailsWrapper,\n  AttachmentWrapper,\n  TaskName,\n  TaskDescription,\n  ClockIcon,\n} from '../Task.style';\nimport PlusIcon from '@iso/assets/images/icon/24.svg';\nimport TitleIcon from '@iso/assets/images/icon/05-icon.svg';\nimport DescriptionIcon from '@iso/assets/images/icon/06-icon.svg';\nimport AttachmentIcon from '@iso/assets/images/icon/01-icon.svg';\nimport Clock from '@iso/assets/images/icon/17.svg';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\n\nconst TaskDetials = ({\n  task,\n  deleteTaskWatcher,\n  editTask,\n  closeDrawer,\n  openDrawer,\n  columnId,\n}) => {\n  return (\n    <CardDetailsWrapper>\n      <CardDetailsHeader\n        onBtnClick={() => {\n          editTask(task);\n          openDrawer({\n            drawerType: 'CREATE_OR_EDIT_TASK',\n            drawerProps: {\n              initials: { ...task, editing: true },\n              columnId: columnId,\n            },\n          });\n        }}\n        onIconClick={closeDrawer}\n        onDelete={() => {\n          deleteTaskWatcher({\n            task_id: task.id,\n            column_id: columnId,\n          });\n          closeDrawer();\n        }}\n      />\n      <HeadingWithIcon heading=\"Task Name\" iconSrc={TitleIcon} />\n      <TaskName>{task.title}</TaskName>\n      <Row>\n        <Col span={8}>\n          <HeadingWithIcon heading=\"Assigned Members\" />\n          <p>\n            {task.assignees.map(assignee => (\n              <Fragment key={assignee}>\n                {!assignee ? (\n                  <IconSvg src={PlusIcon} />\n                ) : (\n                  <IconSvg\n                    src={\n                      'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png'\n                    }\n                    padding={'0'}\n                    radius={'10% 30% 25%'}\n                  />\n                )}\n              </Fragment>\n            ))}\n          </p>\n        </Col>\n        <Col span={8}>\n          <HeadingWithIcon heading=\"Labels\" />\n          <p>\n            {task.labels.map(label => (\n              <Tooltip\n                title={`${label[0].toUpperCase()}${label.slice(1)}`}\n                placement=\"bottom\"\n                key={label}\n              >\n                <Badge status={label} />\n              </Tooltip>\n            ))}\n          </p>\n        </Col>\n        <Col span={8}>\n          <HeadingWithIcon heading=\"Due Date\" />\n          <ClockIcon src={Clock} />\n          {moment(task.due_date).format('ddd d, YYYY')}\n        </Col>\n      </Row>\n      <div style={{ clear: 'both', paddingTop: '30px' }}>\n        <HeadingWithIcon heading=\"Description\" iconSrc={DescriptionIcon} />\n        <TaskDescription>{task.description}</TaskDescription>\n      </div>\n      <AttachmentWrapper>\n        <HeadingWithIcon heading=\"Attachments\" iconSrc={AttachmentIcon} />\n      </AttachmentWrapper>\n      <Comments />\n    </CardDetailsWrapper>\n  );\n};\nexport default connect(\n  null,\n  { ...scrumBoardActions }\n)(TaskDetials);\n"]},"metadata":{},"sourceType":"module"}