{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar FileList = require('./FileList');\n\nvar AddFiles = require('./AddFiles');\n\nvar AddFilesPanel = require('./AddFilesPanel');\n\nvar PickerPanelContent = require('./PickerPanelContent');\n\nvar PanelTopBar = require('./PickerPanelTopBar');\n\nvar FileCard = require('./FileCard');\n\nvar classNames = require('classnames');\n\nvar isTouchDevice = require('@uppy/utils/lib/isTouchDevice');\n\nvar _require = require('preact'),\n    h = _require.h;\n\nvar PreactCSSTransitionGroup = require('preact-css-transition-group'); // http://dev.edenspiekermann.com/2016/02/11/introducing-accessible-modal-dialog\n// https://github.com/ghosh/micromodal\n\n\nfunction TransitionWrapper(props) {\n  return h(PreactCSSTransitionGroup, {\n    transitionName: \"uppy-transition-slideDownUp\",\n    transitionEnterTimeout: 250,\n    transitionLeaveTimeout: 250\n  }, props.children);\n}\n\nmodule.exports = function Dashboard(props) {\n  var noFiles = props.totalFileCount === 0;\n  var dashboardClassName = classNames({\n    'uppy-Root': props.isTargetDOMEl\n  }, 'uppy-Dashboard', {\n    'Uppy--isTouchDevice': isTouchDevice()\n  }, {\n    'uppy-Dashboard--animateOpenClose': props.animateOpenClose\n  }, {\n    'uppy-Dashboard--isClosing': props.isClosing\n  }, {\n    'uppy-Dashboard--isDraggingOver': props.isDraggingOver\n  }, {\n    'uppy-Dashboard--modal': !props.inline\n  }, {\n    'uppy-size--md': props.containerWidth > 576\n  }, {\n    'uppy-size--lg': props.containerWidth > 700\n  }, {\n    'uppy-size--xl': props.containerWidth > 900\n  }, {\n    'uppy-Dashboard--isAddFilesPanelVisible': props.showAddFilesPanel\n  }, {\n    'uppy-Dashboard--isInnerWrapVisible': props.areInsidesReadyToBeVisible\n  });\n  return h(\"div\", {\n    class: dashboardClassName,\n    \"aria-hidden\": props.inline ? 'false' : props.isHidden,\n    \"aria-label\": !props.inline ? props.i18n('dashboardWindowTitle') : props.i18n('dashboardTitle'),\n    onpaste: props.handlePaste,\n    onDragOver: props.handleDragOver,\n    onDragLeave: props.handleDragLeave,\n    onDrop: props.handleDrop\n  }, h(\"div\", {\n    class: \"uppy-Dashboard-overlay\",\n    tabindex: -1,\n    onclick: props.handleClickOutside\n  }), h(\"div\", {\n    class: \"uppy-Dashboard-inner\",\n    \"aria-modal\": !props.inline && 'true',\n    role: !props.inline && 'dialog',\n    style: {\n      width: props.inline && props.width ? props.width : '',\n      height: props.inline && props.height ? props.height : ''\n    }\n  }, !props.inline ? h(\"button\", {\n    class: \"uppy-u-reset uppy-Dashboard-close\",\n    type: \"button\",\n    \"aria-label\": props.i18n('closeModal'),\n    title: props.i18n('closeModal'),\n    onclick: props.closeModal\n  }, h(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, h(\"div\", {\n    class: \"uppy-Dashboard-innerWrap\"\n  }, h(\"div\", {\n    class: \"uppy-Dashboard-dropFilesHereHint\"\n  }, props.i18n('dropHint')), !noFiles && props.showSelectedFiles && h(PanelTopBar, props), props.showSelectedFiles ? noFiles ? h(AddFiles, props) : h(FileList, props) : h(AddFiles, props), h(TransitionWrapper, null, props.showAddFilesPanel ? h(AddFilesPanel, _extends({\n    key: \"AddFilesPanel\"\n  }, props)) : null), h(TransitionWrapper, null, props.fileCardFor ? h(FileCard, _extends({\n    key: \"FileCard\"\n  }, props)) : null), h(TransitionWrapper, null, props.activePickerPanel ? h(PickerPanelContent, _extends({\n    key: \"PickerPanelContent\"\n  }, props)) : null), h(\"div\", {\n    class: \"uppy-Dashboard-progressindicators\"\n  }, props.progressindicators.map(function (target) {\n    return props.getPlugin(target.id).render(props.state);\n  })))));\n};","map":null,"metadata":{},"sourceType":"script"}