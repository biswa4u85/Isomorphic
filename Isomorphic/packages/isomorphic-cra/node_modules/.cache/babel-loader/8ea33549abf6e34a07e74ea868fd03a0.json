{"ast":null,"code":"var _require = require('preact'),\n    h = _require.h;\n\nvar getAriaLabelOfCheckbox = function getAriaLabelOfCheckbox(props) {\n  if (props.type === 'folder') {\n    if (props.isChecked) {\n      return props.i18n('unselectAllFilesFromFolderNamed', {\n        name: props.title\n      });\n    } else {\n      return props.i18n('selectAllFilesFromFolderNamed', {\n        name: props.title\n      });\n    }\n  } else {\n    if (props.isChecked) {\n      return props.i18n('unselectFileNamed', {\n        name: props.title\n      });\n    } else {\n      return props.i18n('selectFileNamed', {\n        name: props.title\n      });\n    }\n  }\n}; // if folder:\n//   + checkbox (selects all files from folder)\n//   + folder name (opens folder)\n// if file:\n//   + checkbox (selects file)\n//   + file name (selects file)\n\n\nmodule.exports = function (props) {\n  return h(\"li\", {\n    class: props.className\n  }, h(\"button\", {\n    type: \"button\",\n    class: \"uppy-u-reset uppy-ProviderBrowserItem-fakeCheckbox \" + (props.isChecked ? 'uppy-ProviderBrowserItem-fakeCheckbox--is-checked' : ''),\n    onClick: props.toggleCheckbox // for the <label/>\n    ,\n    id: props.id,\n    role: \"option\",\n    \"aria-label\": getAriaLabelOfCheckbox(props),\n    \"aria-selected\": props.isChecked,\n    \"aria-disabled\": props.isDisabled,\n    \"data-uppy-super-focusable\": true\n  }), props.type === 'file' ? // label for a checkbox\n  h(\"label\", {\n    for: props.id,\n    className: \"uppy-u-reset uppy-ProviderBrowserItem-inner\"\n  }, props.itemIconEl, props.showTitles && props.title) : // button to open a folder\n  h(\"button\", {\n    type: \"button\",\n    class: \"uppy-u-reset uppy-ProviderBrowserItem-inner\",\n    onclick: props.handleFolderClick,\n    \"aria-label\": props.i18n('openFolderNamed', {\n      name: props.title\n    })\n  }, props.itemIconEl, props.showTitles && props.title));\n};","map":null,"metadata":{},"sourceType":"script"}