{"ast":null,"code":"import _defineProperty from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Task/Task.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport drawerActions from '@iso/redux/drawer/actions';\nimport { Container } from './Task.style';\nimport TaskCard from './TaskCard/TaskCard';\n\nclass TaskItem extends React.PureComponent {\n  render() {\n    const _this$props = this.props,\n          task = _this$props.task,\n          isDragging = _this$props.isDragging,\n          isGroupedOver = _this$props.isGroupedOver,\n          provided = _this$props.provided,\n          columnId = _this$props.columnId,\n          deleteTaskWatcher = _this$props.deleteTaskWatcher,\n          openDrawer = _this$props.openDrawer,\n          closeDrawer = _this$props.closeDrawer;\n    return React.createElement(Container, Object.assign({\n      isDragging: isDragging,\n      isGroupedOver: isGroupedOver,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), React.createElement(TaskCard, {\n      task: task,\n      showDrawer: () => openDrawer({\n        drawerType: 'CARD_DETAILS',\n        drawerProps: {\n          task: task,\n          columnId: columnId\n        }\n      }),\n      onDelete: () => {\n        deleteTaskWatcher({\n          task_id: task.id,\n          column_id: columnId\n        });\n        closeDrawer();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default connect(null, _objectSpread({}, scrumBoardActions, {}, drawerActions))(TaskItem);","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Task/Task.js"],"names":["React","connect","scrumBoardActions","drawerActions","Container","TaskCard","TaskItem","PureComponent","render","props","task","isDragging","isGroupedOver","provided","columnId","deleteTaskWatcher","openDrawer","closeDrawer","innerRef","draggableProps","dragHandleProps","drawerType","drawerProps","task_id","id","column_id"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,aAA7B,CAA2C;AACzCC,EAAAA,MAAM,GAAG;AAAA,wBAUH,KAAKC,KAVF;AAAA,UAELC,IAFK,eAELA,IAFK;AAAA,UAGLC,UAHK,eAGLA,UAHK;AAAA,UAILC,aAJK,eAILA,aAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMLC,QANK,eAMLA,QANK;AAAA,UAOLC,iBAPK,eAOLA,iBAPK;AAAA,UAQLC,UARK,eAQLA,UARK;AAAA,UASLC,WATK,eASLA,WATK;AAYP,WACE,oBAAC,SAAD;AACE,MAAA,UAAU,EAAEN,UADd;AAEE,MAAA,aAAa,EAAEC,aAFjB;AAGE,MAAA,GAAG,EAAEC,QAAQ,CAACK;AAHhB,OAIML,QAAQ,CAACM,cAJf,EAKMN,QAAQ,CAACO,eALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEV,IADR;AAEE,MAAA,UAAU,EAAE,MACVM,UAAU,CAAC;AACTK,QAAAA,UAAU,EAAE,cADH;AAETC,QAAAA,WAAW,EAAE;AACXZ,UAAAA,IAAI,EAAEA,IADK;AAEXI,UAAAA,QAAQ,EAAEA;AAFC;AAFJ,OAAD,CAHd;AAWE,MAAA,QAAQ,EAAE,MAAM;AACdC,QAAAA,iBAAiB,CAAC;AAAEQ,UAAAA,OAAO,EAAEb,IAAI,CAACc,EAAhB;AAAoBC,UAAAA,SAAS,EAAEX;AAA/B,SAAD,CAAjB;AACAG,QAAAA,WAAW;AACZ,OAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AA0BD;;AAvCwC;;AA0C3C,eAAehB,OAAO,CACpB,IADoB,oBAEfC,iBAFe,MAEOC,aAFP,EAAP,CAGbG,QAHa,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport drawerActions from '@iso/redux/drawer/actions';\nimport { Container } from './Task.style';\nimport TaskCard from './TaskCard/TaskCard';\n\nclass TaskItem extends React.PureComponent {\n  render() {\n    const {\n      task,\n      isDragging,\n      isGroupedOver,\n      provided,\n      columnId,\n      deleteTaskWatcher,\n      openDrawer,\n      closeDrawer,\n    } = this.props;\n\n    return (\n      <Container\n        isDragging={isDragging}\n        isGroupedOver={isGroupedOver}\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n      >\n        <TaskCard\n          task={task}\n          showDrawer={() =>\n            openDrawer({\n              drawerType: 'CARD_DETAILS',\n              drawerProps: {\n                task: task,\n                columnId: columnId,\n              },\n            })\n          }\n          onDelete={() => {\n            deleteTaskWatcher({ task_id: task.id, column_id: columnId });\n            closeDrawer();\n          }}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { ...scrumBoardActions, ...drawerActions }\n)(TaskItem);\n"]},"metadata":{},"sourceType":"module"}