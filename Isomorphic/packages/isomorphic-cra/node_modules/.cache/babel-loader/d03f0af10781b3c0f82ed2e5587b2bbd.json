{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [thunk, sagaMiddleware];\n\nconst bindMiddleware = middleware => {\n  if (process.env.NODE_ENV !== 'production') {\n    const _require = require('redux-devtools-extension'),\n          composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst store = createStore(rootReducer, bindMiddleware(middlewares));\nsagaMiddleware.run(rootSaga);\nexport { store };","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/packages/isomorphic-cra/src/redux/store.js"],"names":["createStore","applyMiddleware","thunk","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleware","middlewares","bindMiddleware","middleware","process","env","NODE_ENV","require","composeWithDevTools","store","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AACA,MAAMI,WAAW,GAAG,CAACL,KAAD,EAAQI,cAAR,CAApB;;AAEA,MAAME,cAAc,GAAGC,UAAU,IAAI;AACnC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAAA,qBACTC,OAAO,CAAC,0BAAD,CADE;AAAA,UACjCC,mBADiC,YACjCA,mBADiC;;AAEzC,WAAOA,mBAAmB,CAACb,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOR,eAAe,CAAC,GAAGQ,UAAJ,CAAtB;AACD,CAND;;AAQA,MAAMM,KAAK,GAAGf,WAAW,CAACI,WAAD,EAAcI,cAAc,CAACD,WAAD,CAA5B,CAAzB;AACAD,cAAc,CAACU,GAAf,CAAmBX,QAAnB;AACA,SAASU,KAAT","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [thunk, sagaMiddleware];\n\nconst bindMiddleware = middleware => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension');\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n  return applyMiddleware(...middleware);\n};\n\nconst store = createStore(rootReducer, bindMiddleware(middlewares));\nsagaMiddleware.run(rootSaga);\nexport { store };\n"]},"metadata":{},"sourceType":"module"}