{"ast":null,"code":"import _defineProperty from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"antd/es/popover/style/css\";\nimport _Popover from \"antd/es/popover\";\nimport \"antd/es/popconfirm/style/css\";\nimport _Popconfirm from \"antd/es/popconfirm\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Column/Column.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport TaskList from '../Task/TaskList/TaskList';\nimport { IconSvg } from '@iso/components/ScrumBoard/IconSvg/IconSvg';\nimport Title from '@iso/components/ScrumBoard/Title';\nimport CreateOrUpdateColumn from './ColumnCreateOrUpdate/ColumnCreateOrUpdate';\nimport { connect } from 'react-redux';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport drawerActions from '@iso/redux/drawer/actions';\nimport MoreIcon from \"@iso/assets/images/icon/16.svg\";\nimport Plus from \"@iso/assets/images/icon/24.svg\";\nimport { Container, Header, PlusIcon, MoreActionsWrapper } from './Column.style';\n\nconst Column = ({\n  title,\n  column,\n  tasks,\n  index,\n  boardId,\n  editColumn,\n  cancelEditColumn,\n  deleteColumnWatcher,\n  openDrawer,\n  isScrollable\n}) => {\n  const MoreActions = React.createElement(MoreActionsWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: () => editColumn(column),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Rename Column\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(_Popconfirm, {\n    title: \"Are you sure delete this Column?\",\n    okText: \"Yes\",\n    cancelText: \"No\",\n    onConfirm: () => deleteColumnWatcher({\n      column_id: column.id,\n      board_id: boardId\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Delete Column\")));\n  return React.createElement(Draggable, {\n    draggableId: title,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Container, Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), column.editing ? React.createElement(CreateOrUpdateColumn, {\n    initials: column,\n    onCancel: () => cancelEditColumn(column),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }) : React.createElement(Header, {\n    isDragging: snapshot.isDragging,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Title, Object.assign({\n    isDragging: snapshot.isDragging\n  }, provided.dragHandleProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), title), React.createElement(PlusIcon, {\n    src: Plus,\n    onClick: () => openDrawer({\n      drawerType: 'CREATE_OR_EDIT_TASK',\n      drawerProps: {\n        columnId: column.id\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(_Popover, {\n    placement: \"bottom\",\n    content: MoreActions,\n    trigger: \"click\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(IconSvg, {\n    src: MoreIcon,\n    border: \"none\",\n    padding: \"0\",\n    mr: '0',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }))), React.createElement(TaskList, {\n    listId: column.id,\n    listType: \"QUOTE\",\n    column: column,\n    tasks: tasks,\n    internalScroll: isScrollable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n};\n\nexport default connect(null, _objectSpread({}, scrumBoardActions, {}, drawerActions))(Column);","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/ScrumBoard/Column/Column.js"],"names":["React","Draggable","TaskList","IconSvg","Title","CreateOrUpdateColumn","connect","scrumBoardActions","drawerActions","Container","Header","PlusIcon","MoreActionsWrapper","Column","title","column","tasks","index","boardId","editColumn","cancelEditColumn","deleteColumnWatcher","openDrawer","isScrollable","MoreActions","column_id","id","board_id","provided","snapshot","innerRef","draggableProps","dragHandleProps","editing","isDragging","Plus","drawerType","drawerProps","columnId","MoreIcon"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Popconfirm, Popover } from 'antd';\nimport { Draggable } from 'react-beautiful-dnd';\nimport TaskList from '../Task/TaskList/TaskList';\nimport { IconSvg } from '@iso/components/ScrumBoard/IconSvg/IconSvg';\nimport Title from '@iso/components/ScrumBoard/Title';\nimport CreateOrUpdateColumn from './ColumnCreateOrUpdate/ColumnCreateOrUpdate';\nimport { connect } from 'react-redux';\nimport scrumBoardActions from '@iso/redux/scrumBoard/actions';\nimport drawerActions from '@iso/redux/drawer/actions';\n\nimport MoreIcon from '@iso/assets/images/icon/16.svg';\nimport Plus from '@iso/assets/images/icon/24.svg';\nimport {\n  Container,\n  Header,\n  PlusIcon,\n  MoreActionsWrapper,\n} from './Column.style';\n\nconst Column = ({\n  title,\n  column,\n  tasks,\n  index,\n  boardId,\n  editColumn,\n  cancelEditColumn,\n  deleteColumnWatcher,\n  openDrawer,\n  isScrollable,\n}) => {\n  const MoreActions = (\n    <MoreActionsWrapper>\n      <p onClick={() => editColumn(column)}>Rename Column</p>\n      <p>\n        <Popconfirm\n          title=\"Are you sure delete this Column?\"\n          okText=\"Yes\"\n          cancelText=\"No\"\n          onConfirm={() =>\n            deleteColumnWatcher({ column_id: column.id, board_id: boardId })\n          }\n        >\n          Delete Column\n        </Popconfirm>\n      </p>\n    </MoreActionsWrapper>\n  );\n  return (\n    <Draggable draggableId={title} index={index}>\n      {(provided, snapshot) => (\n        <Container\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          {column.editing ? (\n            <CreateOrUpdateColumn\n              initials={column}\n              onCancel={() => cancelEditColumn(column)}\n            />\n          ) : (\n            <Header isDragging={snapshot.isDragging}>\n              <Title\n                isDragging={snapshot.isDragging}\n                {...provided.dragHandleProps}\n              >\n                {title}\n              </Title>\n              <PlusIcon\n                src={Plus}\n                onClick={() =>\n                  openDrawer({\n                    drawerType: 'CREATE_OR_EDIT_TASK',\n                    drawerProps: { columnId: column.id },\n                  })\n                }\n              />\n              <Popover placement=\"bottom\" content={MoreActions} trigger=\"click\">\n                <IconSvg src={MoreIcon} border=\"none\" padding=\"0\" mr={'0'} />\n              </Popover>\n            </Header>\n          )}\n\n          <TaskList\n            listId={column.id}\n            listType=\"QUOTE\"\n            column={column}\n            tasks={tasks}\n            internalScroll={isScrollable}\n          />\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n\nexport default connect(\n  null,\n  { ...scrumBoardActions, ...drawerActions }\n)(Column);\n"]},"metadata":{},"sourceType":"module"}