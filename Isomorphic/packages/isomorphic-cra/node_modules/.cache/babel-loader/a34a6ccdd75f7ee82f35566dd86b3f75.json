{"ast":null,"code":"import _slicedToArray from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/UIElements/Tree/DraggableTree.js\";\nimport React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n  const children = [];\n\n  for (let i = 0; i < x; i++) {\n    const key = \"\".concat(preKey, \"-\").concat(i);\n    tns.push({\n      title: key,\n      key\n    });\n\n    if (i < y) {\n      children.push(key);\n    }\n  }\n\n  if (_level < 0) {\n    return tns;\n  }\n\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\n\ngenerateData(z);\nexport default function () {\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        gData = _React$useState2[0],\n        setGData = _React$useState2[1];\n\n  const _React$useState3 = React.useState(['0-0', '0-0-0', '0-0-0-0']),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        expandedKeys = _React$useState4[0],\n        setExpandedKeys = _React$useState4[1];\n\n  const onDragEnter = info => {};\n\n  const onDrop = info => {\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n\n    const data = [...gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i - 1, 0, dragObj);\n      }\n    } else {\n      loop(data, dropKey, item => {\n        item.children = item.children || [];\n        item.children.push(dragObj);\n      });\n    }\n\n    setGData(data);\n  };\n\n  const loop = data => data.map(item => {\n    if (item.children && item.children.length) {\n      return React.createElement(TreeNode, {\n        key: item.key,\n        title: item.key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, loop(item.children));\n    }\n\n    return React.createElement(TreeNode, {\n      key: item.key,\n      title: item.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  });\n\n  return React.createElement(Tree, {\n    className: \"draggable-tree\",\n    defaultExpandedKeys: expandedKeys,\n    draggable: true,\n    onDragEnter: onDragEnter,\n    onDrop: onDrop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, loop(gData));\n}","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/UIElements/Tree/DraggableTree.js"],"names":["React","Tree","TreeNode","x","y","z","gData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","title","level","forEach","index","useState","setGData","expandedKeys","setExpandedKeys","onDragEnter","info","onDrop","dropKey","node","props","eventKey","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","length","loop","data","callback","item","arr","dragObj","splice","dropToGap","ar","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nexport default function() {\n  const [gData, setGData] = React.useState([]);\n  const [expandedKeys, setExpandedKeys] = React.useState([\n    '0-0',\n    '0-0-0',\n    '0-0-0-0',\n  ]);\n\n  const onDragEnter = info => {};\n  const onDrop = info => {\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition =\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n    const data = [...gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n    if (info.dropToGap) {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i - 1, 0, dragObj);\n      }\n    } else {\n      loop(data, dropKey, item => {\n        item.children = item.children || [];\n        item.children.push(dragObj);\n      });\n    }\n    setGData(data);\n  };\n  const loop = data =>\n    data.map(item => {\n      if (item.children && item.children.length) {\n        return (\n          <TreeNode key={item.key} title={item.key}>\n            {loop(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} title={item.key} />;\n    });\n  return (\n    <Tree\n      className=\"draggable-tree\"\n      defaultExpandedKeys={expandedKeys}\n      draggable\n      onDragEnter={onDragEnter}\n      onDrop={onDrop}\n    >\n      {loop(gData)}\n    </Tree>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}