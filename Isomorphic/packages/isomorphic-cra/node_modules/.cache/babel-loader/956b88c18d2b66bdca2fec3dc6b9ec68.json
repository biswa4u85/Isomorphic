{"ast":null,"code":"var _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/Quiz/MultipleQuestion.js\";\nimport React, { Component, Fragment } from 'react';\nimport Checkbox, { CheckboxGroup } from '@iso/components/uielements/checkbox';\nimport Button, { ButtonGroup } from '@iso/components/uielements/button';\nexport default class MultipleQuestion extends Component {\n  // Then we add our constructor which receives our props\n  constructor(props) {\n    super(props);\n\n    this.onCheckboxChange = e => {\n      this.setState({\n        answer: e\n      });\n    };\n\n    this.showResult = e => {\n      this.setState({\n        showResult: true\n      });\n    };\n\n    this.answerQuestion = e => {\n      if (this.state.answer !== '') {\n        this.props.setQuestionAnswer(this.state.answer);\n      } else {\n        alert('Please select an answer');\n      }\n    };\n\n    this.nextQuestion = e => {\n      this.setState({\n        answer: ''\n      });\n      this.props.nextQuestion();\n    };\n\n    this.state = {\n      answer: '',\n      showResult: false\n    };\n  }\n\n  // The render function, where we actually tell the browser what it should show\n  render() {\n    const _this$props = this.props,\n          question = _this$props.question,\n          answers = _this$props.answers,\n          submitted = _this$props.submitted,\n          total = _this$props.total,\n          activeQuestion = _this$props.activeQuestion,\n          correct = _this$props.correct,\n          wrong = _this$props.wrong;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, !this.state.showResult ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, !question.showAnswer ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(CheckboxGroup, {\n      onChange: this.onCheckboxChange,\n      options: question.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.answerQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(CheckboxGroup, {\n      onChange: this.onCheckboxChange,\n      options: question.options,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), activeQuestion < total - 1 ? React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Next\") : React.createElement(Button, {\n      type: \"primary\",\n      onClick: this.showResult,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Show Result\")), submitted && answers ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Correct answer!\")) : null, submitted && !answers ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Wrong answer! Correct Answer is :\", question.answers)) : null) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Your correct answer: \", correct), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Your wrong answer: \", wrong)));\n  }\n\n}","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/Quiz/MultipleQuestion.js"],"names":["React","Component","Fragment","Checkbox","CheckboxGroup","Button","ButtonGroup","MultipleQuestion","constructor","props","onCheckboxChange","e","setState","answer","showResult","answerQuestion","state","setQuestionAnswer","alert","nextQuestion","render","question","answers","submitted","total","activeQuestion","correct","wrong","showAnswer","options"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Icon } from 'antd';\nimport Checkbox, { CheckboxGroup } from '@iso/components/uielements/checkbox';\nimport Button, { ButtonGroup } from '@iso/components/uielements/button';\n\nexport default class MultipleQuestion extends Component {\n  // Then we add our constructor which receives our props\n  constructor(props) {\n    super(props);\n    this.state = {\n      answer: '',\n      showResult: false,\n    };\n  }\n  onCheckboxChange = e => {\n    this.setState({ answer: e });\n  };\n  showResult = e => {\n    this.setState({ showResult: true });\n  };\n  answerQuestion = e => {\n    if (this.state.answer !== '') {\n      this.props.setQuestionAnswer(this.state.answer);\n    } else {\n      alert('Please select an answer');\n    }\n  };\n  nextQuestion = e => {\n    this.setState({ answer: '' });\n    this.props.nextQuestion();\n  };\n  // The render function, where we actually tell the browser what it should show\n  render() {\n    const {\n      question,\n      answers,\n      submitted,\n      total,\n      activeQuestion,\n      correct,\n      wrong,\n    } = this.props;\n    return (\n      <div>\n        {!this.state.showResult ? (\n          <Fragment>\n            {!question.showAnswer ? (\n              <Fragment>\n                <CheckboxGroup\n                  onChange={this.onCheckboxChange}\n                  options={question.options}\n                />\n                <Button type=\"primary\" onClick={this.answerQuestion}>\n                  Submit\n                </Button>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <CheckboxGroup\n                  onChange={this.onCheckboxChange}\n                  options={question.options}\n                  disabled\n                />\n                {activeQuestion < total - 1 ? (\n                  <Button type=\"primary\" onClick={this.nextQuestion}>\n                    Next\n                  </Button>\n                ) : (\n                  <Button type=\"primary\" onClick={this.showResult}>\n                    Show Result\n                  </Button>\n                )}\n              </Fragment>\n            )}\n\n            {submitted && answers ? (\n              <Fragment>\n                <p>Correct answer!</p>\n              </Fragment>\n            ) : null}\n            {submitted && !answers ? (\n              <Fragment>\n                <p>Wrong answer! Correct Answer is :{question.answers}</p>\n              </Fragment>\n            ) : null}\n          </Fragment>\n        ) : (\n          <Fragment>\n            <p>Your correct answer: {correct}</p>\n            <p>Your wrong answer: {wrong}</p>\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}