{"ast":null,"code":"import _defineProperty from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/Calendar/Calendar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport ModalEvents from './ModalEvents';\nimport notification from '@iso/components/Notification';\nimport calendarActions from '@iso/redux/calendar/actions';\nimport { CalendarStyleWrapper } from './Calendar.styles';\nconst Localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\nconst changeView = calendarActions.changeView,\n      changeEvents = calendarActions.changeEvents;\n\nconst mapToRBCFormat = e => Object.assign({}, e, {\n  start: new Date(e.start),\n  end: new Date(e.end)\n});\n\nconst getIndex = (events, selectedEvent) => events.findIndex(event => event.id === selectedEvent.id);\n\nexport default function DndCalendar() {\n  const _useSelector = useSelector(state => state.Calendar),\n        events = _useSelector.events,\n        view = _useSelector.view;\n\n  const dispatch = useDispatch();\n\n  const _React$useState = React.useState({\n    view: view,\n    modalVisible: false,\n    selectedData: undefined\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const onSelectEvent = selectedData => {\n    setState(_objectSpread({}, state, {\n      modalVisible: 'update',\n      selectedData\n    }));\n  };\n\n  const onSelectSlot = selectedData => {\n    setState(_objectSpread({}, state, {\n      modalVisible: 'new',\n      selectedData\n    }));\n  };\n\n  const onView = view => {\n    dispatch(changeView(view));\n  };\n\n  const moveEvent = ({\n    event,\n    start,\n    end,\n    isAllDay: droppedOnAllDaySlot\n  }) => {\n    let allDay = event.allDay;\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true;\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false;\n    }\n\n    const updatedEvent = _objectSpread({}, event, {\n      start,\n      end,\n      allDay\n    });\n\n    const idx = getIndex(events, updatedEvent);\n    const nextEvents = [...events];\n    nextEvents.splice(idx, 1, updatedEvent);\n    dispatch(changeEvents(nextEvents));\n    notification('success', 'Move event successfully', \"\".concat(event.title, \" was dropped onto \").concat(event.start));\n  };\n\n  const resizeEvent = ({\n    event,\n    start,\n    end\n  }) => {\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id === event.id ? _objectSpread({}, existingEvent, {\n        start,\n        end\n      }) : existingEvent;\n    });\n    dispatch(changeEvents(nextEvents));\n    notification('success', 'Resize event successfully', \"\".concat(event.title, \" was resized to \").concat(start, \"-\").concat(end));\n  };\n\n  const setModalData = (type, selectedData) => {\n    const newEvents = [...events];\n    const modalVisible = state.modalVisible;\n\n    if (type === 'cancel') {\n      setState(_objectSpread({}, state, {\n        modalVisible: false,\n        selectedData: undefined\n      }));\n    } else if (type === 'delete') {\n      const idx = getIndex(newEvents, selectedData);\n\n      if (idx > -1) {\n        newEvents.splice(idx, 1);\n      }\n\n      dispatch(changeEvents(newEvents));\n      setState(_objectSpread({}, state, {\n        modalVisible: false,\n        selectedData: undefined\n      }));\n    } else if (type === 'updateValue') {\n      setState(_objectSpread({}, state, {\n        selectedData\n      }));\n    } else {\n      if (modalVisible === 'new') {\n        newEvents.push(selectedData);\n      } else {\n        const idx = getIndex(newEvents, selectedData);\n\n        if (idx > -1) {\n          newEvents[idx] = selectedData;\n        }\n      }\n\n      dispatch(changeEvents(newEvents));\n      setState(_objectSpread({}, state, {\n        modalVisible: false,\n        selectedData: undefined\n      }));\n    }\n  };\n\n  return React.createElement(CalendarStyleWrapper, {\n    className: \"isomorphicCalendarWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(ModalEvents, {\n    modalVisible: state.modalVisible,\n    selectedData: state.selectedData,\n    setModalData: setModalData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(DragAndDropCalendar, {\n    className: \"isomorphicCalendar\",\n    selectable: true,\n    localizer: Localizer,\n    events: events.map(mapToRBCFormat),\n    onEventDrop: moveEvent,\n    resizable: true,\n    onEventResize: resizeEvent,\n    onSelectEvent: onSelectEvent,\n    onSelectSlot: onSelectSlot,\n    onView: onView,\n    defaultView: \"month\",\n    defaultDate: new Date(),\n    step: 60,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/Calendar/Calendar.js"],"names":["React","useDispatch","useSelector","moment","Calendar","momentLocalizer","withDragAndDrop","ModalEvents","notification","calendarActions","CalendarStyleWrapper","Localizer","DragAndDropCalendar","changeView","changeEvents","mapToRBCFormat","e","Object","assign","start","Date","end","getIndex","events","selectedEvent","findIndex","event","id","DndCalendar","state","view","dispatch","useState","modalVisible","selectedData","undefined","setState","onSelectEvent","onSelectSlot","onView","moveEvent","isAllDay","droppedOnAllDaySlot","allDay","updatedEvent","idx","nextEvents","splice","title","resizeEvent","map","existingEvent","setModalData","type","newEvents","push"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,oBAA1C;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AAEA,SAASC,oBAAT,QAAqC,mBAArC;AAEA,MAAMC,SAAS,GAAGN,eAAe,CAACF,MAAD,CAAjC;AACA,MAAMS,mBAAmB,GAAGN,eAAe,CAACF,QAAD,CAA3C;MACQS,U,GAA6BJ,e,CAA7BI,U;MAAYC,Y,GAAiBL,e,CAAjBK,Y;;AAEpB,MAAMC,cAAc,GAAGC,CAAC,IACtBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,CAAlB,EAAqB;AACnBG,EAAAA,KAAK,EAAE,IAAIC,IAAJ,CAASJ,CAAC,CAACG,KAAX,CADY;AAEnBE,EAAAA,GAAG,EAAE,IAAID,IAAJ,CAASJ,CAAC,CAACK,GAAX;AAFc,CAArB,CADF;;AAMA,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,aAAT,KACfD,MAAM,CAACE,SAAP,CAAiBC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaH,aAAa,CAACG,EAArD,CADF;;AAGA,eAAe,SAASC,WAAT,GAAuB;AAAA,uBACX1B,WAAW,CAAC2B,KAAK,IAAIA,KAAK,CAACzB,QAAhB,CADA;AAAA,QAC5BmB,MAD4B,gBAC5BA,MAD4B;AAAA,QACpBO,IADoB,gBACpBA,IADoB;;AAEpC,QAAMC,QAAQ,GAAG9B,WAAW,EAA5B;;AAFoC,0BAGVD,KAAK,CAACgC,QAAN,CAAe;AACvCF,IAAAA,IAAI,EAAEA,IADiC;AAEvCG,IAAAA,YAAY,EAAE,KAFyB;AAGvCC,IAAAA,YAAY,EAAEC;AAHyB,GAAf,CAHU;AAAA;AAAA,QAG7BN,KAH6B;AAAA,QAGtBO,QAHsB;;AASpC,QAAMC,aAAa,GAAGH,YAAY,IAAI;AACpCE,IAAAA,QAAQ,mBAAMP,KAAN;AAAaI,MAAAA,YAAY,EAAE,QAA3B;AAAqCC,MAAAA;AAArC,OAAR;AACD,GAFD;;AAGA,QAAMI,YAAY,GAAGJ,YAAY,IAAI;AACnCE,IAAAA,QAAQ,mBAAMP,KAAN;AAAaI,MAAAA,YAAY,EAAE,KAA3B;AAAkCC,MAAAA;AAAlC,OAAR;AACD,GAFD;;AAIA,QAAMK,MAAM,GAAGT,IAAI,IAAI;AACrBC,IAAAA,QAAQ,CAAClB,UAAU,CAACiB,IAAD,CAAX,CAAR;AACD,GAFD;;AAGA,QAAMU,SAAS,GAAG,CAAC;AAAEd,IAAAA,KAAF;AAASP,IAAAA,KAAT;AAAgBE,IAAAA,GAAhB;AAAqBoB,IAAAA,QAAQ,EAAEC;AAA/B,GAAD,KAA0D;AAC1E,QAAIC,MAAM,GAAGjB,KAAK,CAACiB,MAAnB;;AACA,QAAI,CAACjB,KAAK,CAACiB,MAAP,IAAiBD,mBAArB,EAA0C;AACxCC,MAAAA,MAAM,GAAG,IAAT;AACD,KAFD,MAEO,IAAIjB,KAAK,CAACiB,MAAN,IAAgB,CAACD,mBAArB,EAA0C;AAC/CC,MAAAA,MAAM,GAAG,KAAT;AACD;;AAED,UAAMC,YAAY,qBAAQlB,KAAR;AAAeP,MAAAA,KAAf;AAAsBE,MAAAA,GAAtB;AAA2BsB,MAAAA;AAA3B,MAAlB;;AACA,UAAME,GAAG,GAAGvB,QAAQ,CAACC,MAAD,EAASqB,YAAT,CAApB;AACA,UAAME,UAAU,GAAG,CAAC,GAAGvB,MAAJ,CAAnB;AACAuB,IAAAA,UAAU,CAACC,MAAX,CAAkBF,GAAlB,EAAuB,CAAvB,EAA0BD,YAA1B;AACAb,IAAAA,QAAQ,CAACjB,YAAY,CAACgC,UAAD,CAAb,CAAR;AAEAtC,IAAAA,YAAY,CACV,SADU,EAEV,yBAFU,YAGPkB,KAAK,CAACsB,KAHC,+BAGyBtB,KAAK,CAACP,KAH/B,EAAZ;AAKD,GAnBD;;AAqBA,QAAM8B,WAAW,GAAG,CAAC;AAAEvB,IAAAA,KAAF;AAASP,IAAAA,KAAT;AAAgBE,IAAAA;AAAhB,GAAD,KAA2B;AAC7C,UAAMyB,UAAU,GAAGvB,MAAM,CAAC2B,GAAP,CAAWC,aAAa,IAAI;AAC7C,aAAOA,aAAa,CAACxB,EAAd,KAAqBD,KAAK,CAACC,EAA3B,qBACEwB,aADF;AACiBhC,QAAAA,KADjB;AACwBE,QAAAA;AADxB,WAEH8B,aAFJ;AAGD,KAJkB,CAAnB;AAMApB,IAAAA,QAAQ,CAACjB,YAAY,CAACgC,UAAD,CAAb,CAAR;AAEAtC,IAAAA,YAAY,CACV,SADU,EAEV,2BAFU,YAGPkB,KAAK,CAACsB,KAHC,6BAGuB7B,KAHvB,cAGgCE,GAHhC,EAAZ;AAKD,GAdD;;AAgBA,QAAM+B,YAAY,GAAG,CAACC,IAAD,EAAOnB,YAAP,KAAwB;AAC3C,UAAMoB,SAAS,GAAG,CAAC,GAAG/B,MAAJ,CAAlB;AAD2C,UAEnCU,YAFmC,GAElBJ,KAFkB,CAEnCI,YAFmC;;AAG3C,QAAIoB,IAAI,KAAK,QAAb,EAAuB;AACrBjB,MAAAA,QAAQ,mBACHP,KADG;AAENI,QAAAA,YAAY,EAAE,KAFR;AAGNC,QAAAA,YAAY,EAAEC;AAHR,SAAR;AAKD,KAND,MAMO,IAAIkB,IAAI,KAAK,QAAb,EAAuB;AAC5B,YAAMR,GAAG,GAAGvB,QAAQ,CAACgC,SAAD,EAAYpB,YAAZ,CAApB;;AACA,UAAIW,GAAG,GAAG,CAAC,CAAX,EAAc;AACZS,QAAAA,SAAS,CAACP,MAAV,CAAiBF,GAAjB,EAAsB,CAAtB;AACD;;AACDd,MAAAA,QAAQ,CAACjB,YAAY,CAACwC,SAAD,CAAb,CAAR;AACAlB,MAAAA,QAAQ,mBACHP,KADG;AAENI,QAAAA,YAAY,EAAE,KAFR;AAGNC,QAAAA,YAAY,EAAEC;AAHR,SAAR;AAKD,KAXM,MAWA,IAAIkB,IAAI,KAAK,aAAb,EAA4B;AACjCjB,MAAAA,QAAQ,mBAAMP,KAAN;AAAaK,QAAAA;AAAb,SAAR;AACD,KAFM,MAEA;AACL,UAAID,YAAY,KAAK,KAArB,EAA4B;AAC1BqB,QAAAA,SAAS,CAACC,IAAV,CAAerB,YAAf;AACD,OAFD,MAEO;AACL,cAAMW,GAAG,GAAGvB,QAAQ,CAACgC,SAAD,EAAYpB,YAAZ,CAApB;;AACA,YAAIW,GAAG,GAAG,CAAC,CAAX,EAAc;AACZS,UAAAA,SAAS,CAACT,GAAD,CAAT,GAAiBX,YAAjB;AACD;AACF;;AACDH,MAAAA,QAAQ,CAACjB,YAAY,CAACwC,SAAD,CAAb,CAAR;AACAlB,MAAAA,QAAQ,mBACHP,KADG;AAENI,QAAAA,YAAY,EAAE,KAFR;AAGNC,QAAAA,YAAY,EAAEC;AAHR,SAAR;AAKD;AACF,GAtCD;;AAwCA,SACE,oBAAC,oBAAD;AAAsB,IAAA,SAAS,EAAC,2BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,YAAY,EAAEN,KAAK,CAACI,YADtB;AAEE,IAAA,YAAY,EAAEJ,KAAK,CAACK,YAFtB;AAGE,IAAA,YAAY,EAAEkB,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,mBAAD;AACE,IAAA,SAAS,EAAC,oBADZ;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,SAAS,EAAEzC,SAHb;AAIE,IAAA,MAAM,EAAEY,MAAM,CAAC2B,GAAP,CAAWnC,cAAX,CAJV;AAKE,IAAA,WAAW,EAAEyB,SALf;AAME,IAAA,SAAS,MANX;AAOE,IAAA,aAAa,EAAES,WAPjB;AAQE,IAAA,aAAa,EAAEZ,aARjB;AASE,IAAA,YAAY,EAAEC,YAThB;AAUE,IAAA,MAAM,EAAEC,MAVV;AAWE,IAAA,WAAW,EAAC,OAXd;AAYE,IAAA,WAAW,EAAE,IAAInB,IAAJ,EAZf;AAaE,IAAA,IAAI,EAAE,EAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAwBD","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport ModalEvents from './ModalEvents';\nimport notification from '@iso/components/Notification';\nimport calendarActions from '@iso/redux/calendar/actions';\n\nimport { CalendarStyleWrapper } from './Calendar.styles';\n\nconst Localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\nconst { changeView, changeEvents } = calendarActions;\n\nconst mapToRBCFormat = e =>\n  Object.assign({}, e, {\n    start: new Date(e.start),\n    end: new Date(e.end),\n  });\n\nconst getIndex = (events, selectedEvent) =>\n  events.findIndex(event => event.id === selectedEvent.id);\n\nexport default function DndCalendar() {\n  const { events, view } = useSelector(state => state.Calendar);\n  const dispatch = useDispatch();\n  const [state, setState] = React.useState({\n    view: view,\n    modalVisible: false,\n    selectedData: undefined,\n  });\n\n  const onSelectEvent = selectedData => {\n    setState({ ...state, modalVisible: 'update', selectedData });\n  };\n  const onSelectSlot = selectedData => {\n    setState({ ...state, modalVisible: 'new', selectedData });\n  };\n\n  const onView = view => {\n    dispatch(changeView(view));\n  };\n  const moveEvent = ({ event, start, end, isAllDay: droppedOnAllDaySlot }) => {\n    let allDay = event.allDay;\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true;\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false;\n    }\n\n    const updatedEvent = { ...event, start, end, allDay };\n    const idx = getIndex(events, updatedEvent);\n    const nextEvents = [...events];\n    nextEvents.splice(idx, 1, updatedEvent);\n    dispatch(changeEvents(nextEvents));\n\n    notification(\n      'success',\n      'Move event successfully',\n      `${event.title} was dropped onto ${event.start}`\n    );\n  };\n\n  const resizeEvent = ({ event, start, end }) => {\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id === event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent;\n    });\n\n    dispatch(changeEvents(nextEvents));\n\n    notification(\n      'success',\n      'Resize event successfully',\n      `${event.title} was resized to ${start}-${end}`\n    );\n  };\n\n  const setModalData = (type, selectedData) => {\n    const newEvents = [...events];\n    const { modalVisible } = state;\n    if (type === 'cancel') {\n      setState({\n        ...state,\n        modalVisible: false,\n        selectedData: undefined,\n      });\n    } else if (type === 'delete') {\n      const idx = getIndex(newEvents, selectedData);\n      if (idx > -1) {\n        newEvents.splice(idx, 1);\n      }\n      dispatch(changeEvents(newEvents));\n      setState({\n        ...state,\n        modalVisible: false,\n        selectedData: undefined,\n      });\n    } else if (type === 'updateValue') {\n      setState({ ...state, selectedData });\n    } else {\n      if (modalVisible === 'new') {\n        newEvents.push(selectedData);\n      } else {\n        const idx = getIndex(newEvents, selectedData);\n        if (idx > -1) {\n          newEvents[idx] = selectedData;\n        }\n      }\n      dispatch(changeEvents(newEvents));\n      setState({\n        ...state,\n        modalVisible: false,\n        selectedData: undefined,\n      });\n    }\n  };\n\n  return (\n    <CalendarStyleWrapper className=\"isomorphicCalendarWrapper\">\n      <ModalEvents\n        modalVisible={state.modalVisible}\n        selectedData={state.selectedData}\n        setModalData={setModalData}\n      />\n      <DragAndDropCalendar\n        className=\"isomorphicCalendar\"\n        selectable\n        localizer={Localizer}\n        events={events.map(mapToRBCFormat)}\n        onEventDrop={moveEvent}\n        resizable\n        onEventResize={resizeEvent}\n        onSelectEvent={onSelectEvent}\n        onSelectSlot={onSelectSlot}\n        onView={onView}\n        defaultView=\"month\"\n        defaultDate={new Date()}\n        step={60}\n      />\n    </CalendarStyleWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}