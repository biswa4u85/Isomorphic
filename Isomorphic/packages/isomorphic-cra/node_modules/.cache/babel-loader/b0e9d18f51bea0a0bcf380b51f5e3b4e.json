{"ast":null,"code":"import _slicedToArray from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/UIElements/Tree/AsyncTree.js\";\nimport React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\n\nfunction generateTreeNodes(treeNode) {\n  const arr = [];\n  const key = treeNode.props.eventKey;\n\n  for (let i = 0; i < 3; i++) {\n    arr.push({\n      name: \"leaf \".concat(key, \"-\").concat(i),\n      key: \"\".concat(key, \"-\").concat(i)\n    });\n  }\n\n  return arr;\n}\n\nfunction setLeaf(treeData, curKey, level) {\n  const loopLeaf = (data, lev) => {\n    const l = lev - 1;\n    data.forEach(item => {\n      if (item.key.length > curKey.length ? item.key.indexOf(curKey) !== 0 : curKey.indexOf(item.key) !== 0) {\n        return;\n      }\n\n      if (item.children) {\n        loopLeaf(item.children, l);\n      } else if (l < 1) {\n        item.isLeaf = true;\n      }\n    });\n  };\n\n  loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n  const loop = data => {\n    if (level < 1 || curKey.length - 3 > level * 2) return;\n    data.forEach(item => {\n      if (curKey.indexOf(item.key) === 0) {\n        if (item.children) {\n          loop(item.children);\n        } else {\n          item.children = child;\n        }\n      }\n    });\n  };\n\n  loop(treeData);\n  setLeaf(treeData, curKey, level);\n}\n\nexport default function () {\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        treeData = _React$useState2[0],\n        setTreeData = _React$useState2[1];\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setTreeData([{\n        name: 'pNode 01',\n        key: '0-0'\n      }, {\n        name: 'pNode 02',\n        key: '0-1'\n      }, {\n        name: 'pNode 03',\n        key: '0-2',\n        isLeaf: true\n      }]);\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const onSelect = info => {};\n\n  const onLoadData = treeNode => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newTreeData = [...treeData];\n        getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);\n        setTreeData(newTreeData);\n        resolve();\n      }, 1000);\n    });\n  };\n\n  const loop = data => data.map(item => {\n    if (item.children) {\n      return React.createElement(TreeNode, {\n        title: item.name,\n        key: item.key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, loop(item.children));\n    }\n\n    return React.createElement(TreeNode, {\n      title: item.name,\n      key: item.key,\n      isLeaf: item.isLeaf,\n      disabled: item.key === '0-0-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    });\n  });\n\n  const treeNodes = loop(treeData);\n  return React.createElement(Tree, {\n    onSelect: onSelect,\n    loadData: onLoadData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, treeNodes);\n}","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/UIElements/Tree/AsyncTree.js"],"names":["React","Tree","TreeNode","generateTreeNodes","treeNode","arr","key","props","eventKey","i","push","name","setLeaf","treeData","curKey","level","loopLeaf","data","lev","l","forEach","item","length","indexOf","children","isLeaf","getNewTreeData","child","loop","useState","setTreeData","useEffect","timer","setTimeout","clearTimeout","onSelect","info","onLoadData","Promise","resolve","newTreeData","map","treeNodes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\n\nfunction generateTreeNodes(treeNode) {\n  const arr = [];\n  const key = treeNode.props.eventKey;\n  for (let i = 0; i < 3; i++) {\n    arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });\n  }\n  return arr;\n}\n\nfunction setLeaf(treeData, curKey, level) {\n  const loopLeaf = (data, lev) => {\n    const l = lev - 1;\n    data.forEach(item => {\n      if (\n        item.key.length > curKey.length\n          ? item.key.indexOf(curKey) !== 0\n          : curKey.indexOf(item.key) !== 0\n      ) {\n        return;\n      }\n      if (item.children) {\n        loopLeaf(item.children, l);\n      } else if (l < 1) {\n        item.isLeaf = true;\n      }\n    });\n  };\n  loopLeaf(treeData, level + 1);\n}\n\nfunction getNewTreeData(treeData, curKey, child, level) {\n  const loop = data => {\n    if (level < 1 || curKey.length - 3 > level * 2) return;\n    data.forEach(item => {\n      if (curKey.indexOf(item.key) === 0) {\n        if (item.children) {\n          loop(item.children);\n        } else {\n          item.children = child;\n        }\n      }\n    });\n  };\n  loop(treeData);\n  setLeaf(treeData, curKey, level);\n}\n\nexport default function() {\n  const [treeData, setTreeData] = React.useState([]);\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      setTreeData([\n        { name: 'pNode 01', key: '0-0' },\n        { name: 'pNode 02', key: '0-1' },\n        { name: 'pNode 03', key: '0-2', isLeaf: true },\n      ]);\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const onSelect = info => {};\n  const onLoadData = treeNode => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newTreeData = [...treeData];\n        getNewTreeData(\n          treeData,\n          treeNode.props.eventKey,\n          generateTreeNodes(treeNode),\n          2\n        );\n        setTreeData(newTreeData);\n        resolve();\n      }, 1000);\n    });\n  };\n  const loop = data =>\n    data.map(item => {\n      if (item.children) {\n        return (\n          <TreeNode title={item.name} key={item.key}>\n            {loop(item.children)}\n          </TreeNode>\n        );\n      }\n      return (\n        <TreeNode\n          title={item.name}\n          key={item.key}\n          isLeaf={item.isLeaf}\n          disabled={item.key === '0-0-0'}\n        />\n      );\n    });\n  const treeNodes = loop(treeData);\n  return (\n    <Tree onSelect={onSelect} loadData={onLoadData}>\n      {treeNodes}\n    </Tree>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}