{"ast":null,"code":"import _defineProperty from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/Tables/AntTables/TableViews/EditView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport clone from 'clone';\nimport TableWrapper from '../AntTables.styles';\nimport { EditableCell, DeleteCell } from '@iso/components/Tables/HelperCells';\nexport default function (props) {\n  const _React$useState = React.useState({\n    columns: createcolumns(clone(props.tableInfo.columns)),\n    dataList: props.dataList.getAll()\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const columns = state.columns,\n        dataList = state.dataList;\n\n  function createcolumns(columns) {\n    const editColumnRender = (text, record, index) => React.createElement(EditableCell, {\n      index: index,\n      columnsKey: columns[1].key,\n      value: text[columns[1].key],\n      onChange: onCellChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n\n    columns[1].render = editColumnRender;\n    const deleteColumn = {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => React.createElement(DeleteCell, {\n        index: index,\n        onDeleteCell: onDeleteCell,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })\n    };\n    columns.push(deleteColumn);\n    return columns;\n  }\n\n  function onCellChange(value, columnsKey, index) {\n    dataList[index][columnsKey] = value;\n    setState(_objectSpread({}, state, {\n      dataList\n    }));\n  }\n\n  function onDeleteCell(index) {\n    dataList.splice(index, 1);\n    setState(_objectSpread({}, state, {\n      dataList\n    }));\n  }\n\n  return React.createElement(TableWrapper, {\n    columns: columns,\n    dataSource: dataList,\n    pagination: {\n      pageSize: 5\n    },\n    className: \"isoEditableTable\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/Tables/AntTables/TableViews/EditView.js"],"names":["React","clone","TableWrapper","EditableCell","DeleteCell","props","useState","columns","createcolumns","tableInfo","dataList","getAll","state","setState","editColumnRender","text","record","index","key","onCellChange","render","deleteColumn","title","dataIndex","onDeleteCell","push","value","columnsKey","splice","pageSize"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,oCAAzC;AAEA,eAAe,UAASC,KAAT,EAAgB;AAAA,0BACHL,KAAK,CAACM,QAAN,CAAe;AACvCC,IAAAA,OAAO,EAAEC,aAAa,CAACP,KAAK,CAACI,KAAK,CAACI,SAAN,CAAgBF,OAAjB,CAAN,CADiB;AAEvCG,IAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAN,CAAeC,MAAf;AAF6B,GAAf,CADG;AAAA;AAAA,QACtBC,KADsB;AAAA,QACfC,QADe;;AAAA,QAKrBN,OALqB,GAKCK,KALD,CAKrBL,OALqB;AAAA,QAKZG,QALY,GAKCE,KALD,CAKZF,QALY;;AAO7B,WAASF,aAAT,CAAuBD,OAAvB,EAAgC;AAC9B,UAAMO,gBAAgB,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,KACvB,oBAAC,YAAD;AACE,MAAA,KAAK,EAAEA,KADT;AAEE,MAAA,UAAU,EAAEV,OAAO,CAAC,CAAD,CAAP,CAAWW,GAFzB;AAGE,MAAA,KAAK,EAAEH,IAAI,CAACR,OAAO,CAAC,CAAD,CAAP,CAAWW,GAAZ,CAHb;AAIE,MAAA,QAAQ,EAAEC,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;;AAQAZ,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWa,MAAX,GAAoBN,gBAApB;AACA,UAAMO,YAAY,GAAG;AACnBC,MAAAA,KAAK,EAAE,WADY;AAEnBC,MAAAA,SAAS,EAAE,WAFQ;AAGnBH,MAAAA,MAAM,EAAE,CAACL,IAAD,EAAOC,MAAP,EAAeC,KAAf,KACN,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAEA,KAAnB;AAA0B,QAAA,YAAY,EAAEO,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJiB,KAArB;AAOAjB,IAAAA,OAAO,CAACkB,IAAR,CAAaJ,YAAb;AACA,WAAOd,OAAP;AACD;;AACD,WAASY,YAAT,CAAsBO,KAAtB,EAA6BC,UAA7B,EAAyCV,KAAzC,EAAgD;AAC9CP,IAAAA,QAAQ,CAACO,KAAD,CAAR,CAAgBU,UAAhB,IAA8BD,KAA9B;AACAb,IAAAA,QAAQ,mBAAMD,KAAN;AAAaF,MAAAA;AAAb,OAAR;AACD;;AACD,WAASc,YAAT,CAAsBP,KAAtB,EAA6B;AAC3BP,IAAAA,QAAQ,CAACkB,MAAT,CAAgBX,KAAhB,EAAuB,CAAvB;AACAJ,IAAAA,QAAQ,mBAAMD,KAAN;AAAaF,MAAAA;AAAb,OAAR;AACD;;AAED,SACE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,UAAU,EAAEG,QAFd;AAGE,IAAA,UAAU,EAAE;AAAEmB,MAAAA,QAAQ,EAAE;AAAZ,KAHd;AAIE,IAAA,SAAS,EAAC,kBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD","sourcesContent":["import React from 'react';\nimport clone from 'clone';\nimport TableWrapper from '../AntTables.styles';\nimport { EditableCell, DeleteCell } from '@iso/components/Tables/HelperCells';\n\nexport default function(props) {\n  const [state, setState] = React.useState({\n    columns: createcolumns(clone(props.tableInfo.columns)),\n    dataList: props.dataList.getAll(),\n  });\n  const { columns, dataList } = state;\n\n  function createcolumns(columns) {\n    const editColumnRender = (text, record, index) => (\n      <EditableCell\n        index={index}\n        columnsKey={columns[1].key}\n        value={text[columns[1].key]}\n        onChange={onCellChange}\n      />\n    );\n    columns[1].render = editColumnRender;\n    const deleteColumn = {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record, index) => (\n        <DeleteCell index={index} onDeleteCell={onDeleteCell} />\n      ),\n    };\n    columns.push(deleteColumn);\n    return columns;\n  }\n  function onCellChange(value, columnsKey, index) {\n    dataList[index][columnsKey] = value;\n    setState({ ...state, dataList });\n  }\n  function onDeleteCell(index) {\n    dataList.splice(index, 1);\n    setState({ ...state, dataList });\n  }\n\n  return (\n    <TableWrapper\n      columns={columns}\n      dataSource={dataList}\n      pagination={{ pageSize: 5 }}\n      className=\"isoEditableTable\"\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}