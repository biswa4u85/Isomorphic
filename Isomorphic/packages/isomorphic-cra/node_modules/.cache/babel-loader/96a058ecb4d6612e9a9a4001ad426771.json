{"ast":null,"code":"var _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/AdvancedUI/Dropzone/Dropzone.js\";\nimport React from 'react';\nimport Dropzone from '@iso/components/uielements/dropzone';\nimport { notification } from '@iso/components';\nimport PageHeader from '@iso/components/utility/pageHeader';\nimport Box from '@iso/components/utility/box';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper';\nimport ContentHolder from '@iso/components/utility/contentHolder';\nimport DropzoneWrapper from './Dropzone.styles';\nexport default (() => {\n  const componentConfig = {\n    iconFiletypes: ['.jpg', '.png', '.gif'],\n    method: true,\n    showFiletypeIcon: true,\n    uploadMultiple: false,\n    maxFilesize: 2,\n    // MB\n    maxFiles: 2,\n    dictMaxFilesExceeded: 'You can only upload upto 2 images',\n    dictRemoveFile: 'Delete',\n    dictCancelUploadConfirmation: 'Are you sure to cancel upload?',\n    postUrl: 'no-url'\n  };\n  const djsConfig = {\n    autoProcessQueue: false\n  };\n  const eventHandlers = {\n    addedfile: file => notification('success', \"\".concat(file.name, \" added\")),\n    success: file => notification('success', \"\".concat(file.name, \" successfully uploaded\")),\n    error: error => notification('error', 'Server is not set in the demo')\n  };\n  return React.createElement(LayoutWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(PageHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Dropzone\"), React.createElement(Box, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(ContentHolder, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(DropzoneWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Dropzone, {\n    config: componentConfig,\n    eventHandlers: eventHandlers,\n    djsConfig: djsConfig,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })))));\n});","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/AdvancedUI/Dropzone/Dropzone.js"],"names":["React","Dropzone","notification","PageHeader","Box","LayoutWrapper","ContentHolder","DropzoneWrapper","componentConfig","iconFiletypes","method","showFiletypeIcon","uploadMultiple","maxFilesize","maxFiles","dictMaxFilesExceeded","dictRemoveFile","dictCancelUploadConfirmation","postUrl","djsConfig","autoProcessQueue","eventHandlers","addedfile","file","name","success","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,gBAAe,MAAM;AACnB,QAAMC,eAAe,GAAG;AACtBC,IAAAA,aAAa,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADO;AAEtBC,IAAAA,MAAM,EAAE,IAFc;AAGtBC,IAAAA,gBAAgB,EAAE,IAHI;AAItBC,IAAAA,cAAc,EAAE,KAJM;AAKtBC,IAAAA,WAAW,EAAE,CALS;AAKN;AAChBC,IAAAA,QAAQ,EAAE,CANY;AAOtBC,IAAAA,oBAAoB,EAAE,mCAPA;AAQtBC,IAAAA,cAAc,EAAE,QARM;AAStBC,IAAAA,4BAA4B,EAAE,gCATR;AAUtBC,IAAAA,OAAO,EAAE;AAVa,GAAxB;AAYA,QAAMC,SAAS,GAAG;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GAAlB;AACA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,SAAS,EAAEC,IAAI,IAAIrB,YAAY,CAAC,SAAD,YAAeqB,IAAI,CAACC,IAApB,YADX;AAEpBC,IAAAA,OAAO,EAAEF,IAAI,IACXrB,YAAY,CAAC,SAAD,YAAeqB,IAAI,CAACC,IAApB,4BAHM;AAIpBE,IAAAA,KAAK,EAAEA,KAAK,IAAIxB,YAAY,CAAC,OAAD,EAAU,+BAAV;AAJR,GAAtB;AAMA,SACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,MAAM,EAAEM,eADV;AAEE,IAAA,aAAa,EAAEa,aAFjB;AAGE,IAAA,SAAS,EAAEF,SAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAFF,CADF;AAgBD,CApCD","sourcesContent":["import React from 'react';\nimport Dropzone from '@iso/components/uielements/dropzone';\nimport { notification } from '@iso/components';\nimport PageHeader from '@iso/components/utility/pageHeader';\nimport Box from '@iso/components/utility/box';\nimport LayoutWrapper from '@iso/components/utility/layoutWrapper';\nimport ContentHolder from '@iso/components/utility/contentHolder';\nimport DropzoneWrapper from './Dropzone.styles';\n\nexport default () => {\n  const componentConfig = {\n    iconFiletypes: ['.jpg', '.png', '.gif'],\n    method: true,\n    showFiletypeIcon: true,\n    uploadMultiple: false,\n    maxFilesize: 2, // MB\n    maxFiles: 2,\n    dictMaxFilesExceeded: 'You can only upload upto 2 images',\n    dictRemoveFile: 'Delete',\n    dictCancelUploadConfirmation: 'Are you sure to cancel upload?',\n    postUrl: 'no-url',\n  };\n  const djsConfig = { autoProcessQueue: false };\n  const eventHandlers = {\n    addedfile: file => notification('success', `${file.name} added`),\n    success: file =>\n      notification('success', `${file.name} successfully uploaded`),\n    error: error => notification('error', 'Server is not set in the demo'),\n  };\n  return (\n    <LayoutWrapper>\n      <PageHeader>Dropzone</PageHeader>\n      <Box>\n        <ContentHolder>\n          <DropzoneWrapper>\n            <Dropzone\n              config={componentConfig}\n              eventHandlers={eventHandlers}\n              djsConfig={djsConfig}\n            />\n          </DropzoneWrapper>\n        </ContentHolder>\n      </Box>\n    </LayoutWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}