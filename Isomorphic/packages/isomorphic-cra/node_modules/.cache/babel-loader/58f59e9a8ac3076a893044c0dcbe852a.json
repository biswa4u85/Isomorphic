{"ast":null,"code":"var _class, _temp;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar toArray = require('@uppy/utils/lib/toArray');\n\nvar isDragDropSupported = require('@uppy/utils/lib/isDragDropSupported');\n\nvar getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');\n\nvar _require2 = require('preact'),\n    h = _require2.h;\n/**\n * Drag & Drop plugin\n *\n */\n\n\nmodule.exports = (_temp = _class =\n/*#__PURE__*/\nfunction (_Plugin) {\n  _inheritsLoose(DragDrop, _Plugin);\n\n  function DragDrop(uppy, opts) {\n    var _this;\n\n    _this = _Plugin.call(this, uppy, opts) || this;\n    _this.type = 'acquirer';\n    _this.id = _this.opts.id || 'DragDrop';\n    _this.title = 'Drag & Drop';\n    _this.defaultLocale = {\n      strings: {\n        dropHereOr: 'Drop files here or %{browse}',\n        browse: 'browse'\n      } // Default options\n\n    };\n    var defaultOpts = {\n      target: null,\n      inputName: 'files[]',\n      width: '100%',\n      height: '100%',\n      note: null // Merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOpts, opts); // Check for browser dragDrop support\n\n    _this.isDragDropSupported = isDragDropSupported();\n    _this.removeDragOverClassTimeout = null; // i18n\n\n    _this.translator = new Translator([_this.defaultLocale, _this.uppy.locale, _this.opts.locale]);\n    _this.i18n = _this.translator.translate.bind(_this.translator);\n    _this.i18nArray = _this.translator.translateArray.bind(_this.translator); // Bind `this` to class methods\n\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this));\n    _this.handleDragOver = _this.handleDragOver.bind(_assertThisInitialized(_this));\n    _this.handleDragLeave = _this.handleDragLeave.bind(_assertThisInitialized(_this));\n    _this.handleDrop = _this.handleDrop.bind(_assertThisInitialized(_this));\n    _this.addFile = _this.addFile.bind(_assertThisInitialized(_this));\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = DragDrop.prototype;\n\n  _proto.addFile = function addFile(file) {\n    try {\n      this.uppy.addFile({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          relativePath: file.relativePath || null\n        }\n      });\n    } catch (err) {\n      if (!err.isRestriction) {\n        this.uppy.log(err);\n      }\n    }\n  };\n\n  _proto.handleInputChange = function handleInputChange(event) {\n    this.uppy.log('[DragDrop] Files selected through input');\n    var files = toArray(event.target.files);\n    files.forEach(this.addFile); // We clear the input after a file is selected, because otherwise\n    // change event is not fired in Chrome and Safari when a file\n    // with the same name is selected.\n    // ___Why not use value=\"\" on <input/> instead?\n    //    Because if we use that method of clearing the input,\n    //    Chrome will not trigger change if we drop the same file twice (Issue #768).\n\n    event.target.value = null;\n  };\n\n  _proto.handleDrop = function handleDrop(event, dropCategory) {\n    var _this2 = this;\n\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this.removeDragOverClassTimeout); // 1. Add a small (+) icon on drop\n\n    event.dataTransfer.dropEffect = 'copy'; // 2. Remove dragover class\n\n    this.setPluginState({\n      isDraggingOver: false\n    }); // 3. Add all dropped files\n\n    this.uppy.log('[DragDrop] Files were dropped');\n\n    var logDropError = function logDropError(error) {\n      _this2.uppy.log(error, 'error');\n    };\n\n    getDroppedFiles(event.dataTransfer, {\n      logDropError: logDropError\n    }).then(function (files) {\n      files.forEach(_this2.addFile);\n    });\n  };\n\n  _proto.handleDragOver = function handleDragOver(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this.removeDragOverClassTimeout);\n    this.setPluginState({\n      isDraggingOver: true\n    });\n  };\n\n  _proto.handleDragLeave = function handleDragLeave(event) {\n    var _this3 = this;\n\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library. Solution with 'pointer-events: none' didn't work across browsers.\n\n    this.removeDragOverClassTimeout = setTimeout(function () {\n      _this3.setPluginState({\n        isDraggingOver: false\n      });\n    }, 50);\n  };\n\n  _proto.renderHiddenFileInput = function renderHiddenFileInput() {\n    var _this4 = this;\n\n    var restrictions = this.uppy.opts.restrictions;\n    return h(\"input\", {\n      class: \"uppy-DragDrop-input\",\n      type: \"file\",\n      tabindex: -1,\n      focusable: \"false\",\n      ref: function ref(_ref) {\n        _this4.fileInputRef = _ref;\n      },\n      name: this.opts.inputName,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: restrictions.allowedFileTypes,\n      onchange: this.handleInputChange\n    });\n  };\n\n  _proto.renderArrowSvg = function renderArrowSvg() {\n    return h(\"svg\", {\n      \"aria-hidden\": \"true\",\n      focusable: \"false\",\n      class: \"UppyIcon uppy-DragDrop-arrow\",\n      width: \"16\",\n      height: \"16\",\n      viewBox: \"0 0 16 16\"\n    }, h(\"path\", {\n      d: \"M11 10V0H5v10H2l6 6 6-6h-3zm0 0\",\n      \"fill-rule\": \"evenodd\"\n    }));\n  };\n\n  _proto.renderLabel = function renderLabel() {\n    return h(\"div\", {\n      class: \"uppy-DragDrop-label\"\n    }, this.i18nArray('dropHereOr', {\n      browse: h(\"span\", {\n        class: \"uppy-DragDrop-browse\"\n      }, this.i18n('browse'))\n    }));\n  };\n\n  _proto.renderNote = function renderNote() {\n    return h(\"span\", {\n      class: \"uppy-DragDrop-note\"\n    }, this.opts.note);\n  };\n\n  _proto.render = function render(state) {\n    var _this5 = this;\n\n    var dragDropClass = \"\\n      uppy-Root\\n      uppy-u-reset\\n      uppy-DragDrop-container\\n      \" + (this.isDragDropSupported ? 'uppy-DragDrop--is-dragdrop-supported' : '') + \"\\n      \" + (this.getPluginState().isDraggingOver ? 'uppy-DragDrop--isDraggingOver' : '') + \"\\n    \";\n    var dragDropStyle = {\n      width: this.opts.width,\n      height: this.opts.height\n    };\n    return h(\"button\", {\n      type: \"button\",\n      class: dragDropClass,\n      style: dragDropStyle,\n      onClick: function onClick() {\n        return _this5.fileInputRef.click();\n      },\n      onDragOver: this.handleDragOver,\n      onDragLeave: this.handleDragLeave,\n      onDrop: this.handleDrop\n    }, this.renderHiddenFileInput(), h(\"div\", {\n      class: \"uppy-DragDrop-inner\"\n    }, this.renderArrowSvg(), this.renderLabel(), this.renderNote()));\n  };\n\n  _proto.install = function install() {\n    this.setPluginState({\n      isDraggingOver: false\n    });\n    var target = this.opts.target;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n\n  _proto.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  return DragDrop;\n}(Plugin), _class.VERSION = \"1.3.1\", _temp);","map":null,"metadata":{},"sourceType":"script"}