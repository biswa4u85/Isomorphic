{"ast":null,"code":"import _defineProperty from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n\n  const _result$splice = result.splice(startIndex, 1),\n        _result$splice2 = _slicedToArray(_result$splice, 1),\n        removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nexport const reorderTasks = ({\n  columns,\n  source,\n  destination,\n  draggableId\n}) => {\n  const sourceColumn = columns[source.droppableId];\n  const sourceColumnTaskOrders = Array.from(columns[source.droppableId].task_orders);\n  const destinationColumn = columns[destination.droppableId];\n  const destinationColumnTaskOrders = Array.from(columns[destination.droppableId].task_orders); // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    sourceColumnTaskOrders.splice(source.index, 1);\n    sourceColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n    const newColumns = _objectSpread({}, columns, {\n      [source.droppableId]: _objectSpread({}, sourceColumn, {\n        task_orders: sourceColumnTaskOrders\n      })\n    });\n\n    return newColumns;\n  } // moving to different list\n  // remove from original\n\n\n  sourceColumnTaskOrders.splice(source.index, 1); // insert into next\n\n  destinationColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n  const newColumns = _objectSpread({}, columns, {\n    [source.droppableId]: _objectSpread({}, sourceColumn, {\n      task_orders: sourceColumnTaskOrders\n    }),\n    [destination.droppableId]: _objectSpread({}, destinationColumn, {\n      task_orders: destinationColumnTaskOrders\n    })\n  });\n\n  return newColumns;\n};","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/library/helpers/reorder.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","reorderTasks","columns","source","destination","draggableId","sourceColumn","droppableId","sourceColumnTaskOrders","task_orders","destinationColumn","destinationColumnTaskOrders","index","newColumns"],"mappings":";;;;;;;AAAA;AACA,OAAO,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AACrD,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;;AADqD,yBAEnCG,MAAM,CAACG,MAAP,CAAcL,UAAd,EAA0B,CAA1B,CAFmC;AAAA;AAAA,QAE9CM,OAF8C;;AAGrDJ,EAAAA,MAAM,CAACG,MAAP,CAAcJ,QAAd,EAAwB,CAAxB,EAA2BK,OAA3B;AAEA,SAAOJ,MAAP;AACD,CANM;AAQP,OAAO,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,WAAnB;AAAgCC,EAAAA;AAAhC,CAAD,KAAmD;AAC7E,QAAMC,YAAY,GAAGJ,OAAO,CAACC,MAAM,CAACI,WAAR,CAA5B;AACA,QAAMC,sBAAsB,GAAGX,KAAK,CAACC,IAAN,CAC7BI,OAAO,CAACC,MAAM,CAACI,WAAR,CAAP,CAA4BE,WADC,CAA/B;AAGA,QAAMC,iBAAiB,GAAGR,OAAO,CAACE,WAAW,CAACG,WAAb,CAAjC;AACA,QAAMI,2BAA2B,GAAGd,KAAK,CAACC,IAAN,CAClCI,OAAO,CAACE,WAAW,CAACG,WAAb,CAAP,CAAiCE,WADC,CAApC,CAN6E,CAS7E;;AACA,MAAIN,MAAM,CAACI,WAAP,KAAuBH,WAAW,CAACG,WAAvC,EAAoD;AAClDC,IAAAA,sBAAsB,CAACT,MAAvB,CAA8BI,MAAM,CAACS,KAArC,EAA4C,CAA5C;AACAJ,IAAAA,sBAAsB,CAACT,MAAvB,CAA8BK,WAAW,CAACQ,KAA1C,EAAiD,CAAjD,EAAoDP,WAApD;;AAEA,UAAMQ,UAAU,qBACXX,OADW;AAEd,OAACC,MAAM,CAACI,WAAR,qBACKD,YADL;AAEEG,QAAAA,WAAW,EAAED;AAFf;AAFc,MAAhB;;AAOA,WAAOK,UAAP;AACD,GAtB4E,CAwB7E;AAEA;;;AACAL,EAAAA,sBAAsB,CAACT,MAAvB,CAA8BI,MAAM,CAACS,KAArC,EAA4C,CAA5C,EA3B6E,CA4B7E;;AACAD,EAAAA,2BAA2B,CAACZ,MAA5B,CAAmCK,WAAW,CAACQ,KAA/C,EAAsD,CAAtD,EAAyDP,WAAzD;;AAEA,QAAMQ,UAAU,qBACXX,OADW;AAEd,KAACC,MAAM,CAACI,WAAR,qBACKD,YADL;AAEEG,MAAAA,WAAW,EAAED;AAFf,MAFc;AAMd,KAACJ,WAAW,CAACG,WAAb,qBACKG,iBADL;AAEED,MAAAA,WAAW,EAAEE;AAFf;AANc,IAAhB;;AAYA,SAAOE,UAAP;AACD,CA5CM","sourcesContent":["// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const reorderTasks = ({ columns, source, destination, draggableId }) => {\n  const sourceColumn = columns[source.droppableId];\n  const sourceColumnTaskOrders = Array.from(\n    columns[source.droppableId].task_orders\n  );\n  const destinationColumn = columns[destination.droppableId];\n  const destinationColumnTaskOrders = Array.from(\n    columns[destination.droppableId].task_orders\n  );\n  // moving to same list\n  if (source.droppableId === destination.droppableId) {\n    sourceColumnTaskOrders.splice(source.index, 1);\n    sourceColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n    const newColumns = {\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        task_orders: sourceColumnTaskOrders,\n      },\n    };\n    return newColumns;\n  }\n\n  // moving to different list\n\n  // remove from original\n  sourceColumnTaskOrders.splice(source.index, 1);\n  // insert into next\n  destinationColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n  const newColumns = {\n    ...columns,\n    [source.droppableId]: {\n      ...sourceColumn,\n      task_orders: sourceColumnTaskOrders,\n    },\n    [destination.droppableId]: {\n      ...destinationColumn,\n      task_orders: destinationColumnTaskOrders,\n    },\n  };\n\n  return newColumns;\n};\n"]},"metadata":{},"sourceType":"module"}