{"ast":null,"code":"var _class, _temp;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar DashboardUI = require('./components/Dashboard');\n\nvar StatusBar = require('@uppy/status-bar');\n\nvar Informer = require('@uppy/informer');\n\nvar ThumbnailGenerator = require('@uppy/thumbnail-generator');\n\nvar findAllDOMElements = require('@uppy/utils/lib/findAllDOMElements');\n\nvar toArray = require('@uppy/utils/lib/toArray');\n\nvar getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');\n\nvar trapFocus = require('./utils/trapFocus');\n\nvar cuid = require('cuid');\n\nvar ResizeObserver = require('resize-observer-polyfill').default || require('resize-observer-polyfill');\n\nvar _require2 = require('./components/icons'),\n    defaultPickerIcon = _require2.defaultPickerIcon;\n\nvar createSuperFocus = require('./utils/createSuperFocus');\n\nvar memoize = require('memoize-one').default || require('memoize-one');\n\nvar TAB_KEY = 9;\nvar ESC_KEY = 27;\n\nfunction createPromise() {\n  var o = {};\n  o.promise = new Promise(function (resolve, reject) {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\n\n\nmodule.exports = (_temp = _class =\n/*#__PURE__*/\nfunction (_Plugin) {\n  _inheritsLoose(Dashboard, _Plugin);\n\n  function Dashboard(uppy, opts) {\n    var _this;\n\n    _this = _Plugin.call(this, uppy, opts) || this;\n\n    _this.cancelUpload = function (fileID) {\n      _this.uppy.removeFile(fileID);\n    };\n\n    _this.saveFileCard = function (meta, fileID) {\n      _this.uppy.setFileMeta(fileID, meta);\n\n      _this.toggleFileCard();\n    };\n\n    _this._attachRenderFunctionToTarget = function (target) {\n      var plugin = _this.uppy.getPlugin(target.id);\n\n      return _extends({}, target, {\n        icon: plugin.icon || _this.opts.defaultPickerIcon,\n        render: plugin.render\n      });\n    };\n\n    _this._isTargetSupported = function (target) {\n      var plugin = _this.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n\n\n      if (typeof plugin.isSupported !== 'function') {\n        return true;\n      }\n\n      return plugin.isSupported();\n    };\n\n    _this._getAcquirers = memoize(function (targets) {\n      return targets.filter(function (target) {\n        return target.type === 'acquirer' && _this._isTargetSupported(target);\n      }).map(_this._attachRenderFunctionToTarget);\n    });\n    _this._getProgressIndicators = memoize(function (targets) {\n      return targets.filter(function (target) {\n        return target.type === 'progressindicator';\n      }).map(_this._attachRenderFunctionToTarget);\n    });\n    _this.id = _this.opts.id || 'Dashboard';\n    _this.title = 'Dashboard';\n    _this.type = 'orchestrator';\n    _this.modalName = \"uppy-Dashboard-\" + cuid();\n    _this.defaultLocale = {\n      strings: {\n        closeModal: 'Close Modal',\n        importFrom: 'Import from %{name}',\n        addingMoreFiles: 'Adding more files',\n        addMoreFiles: 'Add more files',\n        dashboardWindowTitle: 'File Uploader Window (Press escape to close)',\n        dashboardTitle: 'File Uploader',\n        copyLinkToClipboardSuccess: 'Link copied to clipboard',\n        copyLinkToClipboardFallback: 'Copy the URL below',\n        copyLink: 'Copy link',\n        link: 'Link',\n        fileSource: 'File source: %{name}',\n        done: 'Done',\n        back: 'Back',\n        addMore: 'Add more',\n        removeFile: 'Remove file',\n        editFile: 'Edit file',\n        editing: 'Editing %{file}',\n        edit: 'Edit',\n        finishEditingFile: 'Finish editing file',\n        saveChanges: 'Save changes',\n        cancel: 'Cancel',\n        myDevice: 'My Device',\n        dropPasteImport: 'Drop files here, paste, %{browse} or import from',\n        dropPaste: 'Drop files here, paste or %{browse}',\n        dropHint: 'Drop your files here',\n        browse: 'browse',\n        uploadComplete: 'Upload complete',\n        uploadPaused: 'Upload paused',\n        resumeUpload: 'Resume upload',\n        pauseUpload: 'Pause upload',\n        retryUpload: 'Retry upload',\n        cancelUpload: 'Cancel upload',\n        xFilesSelected: {\n          0: '%{smart_count} file selected',\n          1: '%{smart_count} files selected',\n          2: '%{smart_count} files selected'\n        },\n        uploadingXFiles: {\n          0: 'Uploading %{smart_count} file',\n          1: 'Uploading %{smart_count} files',\n          2: 'Uploading %{smart_count} files'\n        },\n        processingXFiles: {\n          0: 'Processing %{smart_count} file',\n          1: 'Processing %{smart_count} files',\n          2: 'Processing %{smart_count} files'\n        },\n        poweredBy: 'Powered by'\n      } // set default options\n\n    };\n    var defaultOptions = {\n      target: 'body',\n      metaFields: [],\n      trigger: '#uppy-select-files',\n      inline: false,\n      width: 750,\n      height: 550,\n      thumbnailWidth: 280,\n      waitForThumbnailsBeforeUpload: false,\n      defaultPickerIcon: defaultPickerIcon,\n      showLinkToFileUploadResult: true,\n      showProgressDetails: false,\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeCancelButtons: false,\n      hideProgressAfterFinish: false,\n      note: null,\n      closeModalOnClickOutside: false,\n      closeAfterFinish: false,\n      disableStatusBar: false,\n      disableInformer: false,\n      disableThumbnailGenerator: false,\n      disablePageScrollWhenModalOpen: true,\n      animateOpenClose: true,\n      proudlyDisplayPoweredByUppy: true,\n      onRequestCloseModal: function onRequestCloseModal() {\n        return _this.closeModal();\n      },\n      showSelectedFiles: true,\n      browserBackButtonClose: false // merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOptions, {}, opts); // i18n\n\n    _this.translator = new Translator([_this.defaultLocale, _this.uppy.locale, _this.opts.locale]);\n    _this.i18n = _this.translator.translate.bind(_this.translator);\n    _this.i18nArray = _this.translator.translateArray.bind(_this.translator);\n    _this.openModal = _this.openModal.bind(_assertThisInitialized(_this));\n    _this.closeModal = _this.closeModal.bind(_assertThisInitialized(_this));\n    _this.requestCloseModal = _this.requestCloseModal.bind(_assertThisInitialized(_this));\n    _this.isModalOpen = _this.isModalOpen.bind(_assertThisInitialized(_this));\n    _this.addTarget = _this.addTarget.bind(_assertThisInitialized(_this));\n    _this.removeTarget = _this.removeTarget.bind(_assertThisInitialized(_this));\n    _this.hideAllPanels = _this.hideAllPanels.bind(_assertThisInitialized(_this));\n    _this.showPanel = _this.showPanel.bind(_assertThisInitialized(_this));\n    _this.toggleFileCard = _this.toggleFileCard.bind(_assertThisInitialized(_this));\n    _this.toggleAddFilesPanel = _this.toggleAddFilesPanel.bind(_assertThisInitialized(_this));\n    _this.initEvents = _this.initEvents.bind(_assertThisInitialized(_this));\n    _this.handlePopState = _this.handlePopState.bind(_assertThisInitialized(_this));\n    _this.handleKeyDownInModal = _this.handleKeyDownInModal.bind(_assertThisInitialized(_this));\n    _this.handleKeyDownInInline = _this.handleKeyDownInInline.bind(_assertThisInitialized(_this));\n    _this.handleComplete = _this.handleComplete.bind(_assertThisInitialized(_this));\n    _this.handleClickOutside = _this.handleClickOutside.bind(_assertThisInitialized(_this));\n    _this.handlePaste = _this.handlePaste.bind(_assertThisInitialized(_this));\n    _this.handlePasteOnBody = _this.handlePasteOnBody.bind(_assertThisInitialized(_this));\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_this));\n    _this.handleDragOver = _this.handleDragOver.bind(_assertThisInitialized(_this));\n    _this.handleDragLeave = _this.handleDragLeave.bind(_assertThisInitialized(_this));\n    _this.handleDrop = _this.handleDrop.bind(_assertThisInitialized(_this));\n    _this.superFocusOnEachUpdate = _this.superFocusOnEachUpdate.bind(_assertThisInitialized(_this));\n    _this.recordIfFocusedOnUppyRecently = _this.recordIfFocusedOnUppyRecently.bind(_assertThisInitialized(_this));\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    _this.install = _this.install.bind(_assertThisInitialized(_this));\n    _this.superFocus = createSuperFocus();\n    _this.ifFocusedOnUppyRecently = false; // Timeouts\n\n    _this.makeDashboardInsidesVisibleAnywayTimeout = null;\n    _this.removeDragOverClassTimeout = null;\n    return _this;\n  }\n\n  var _proto = Dashboard.prototype;\n\n  _proto.removeTarget = function removeTarget(plugin) {\n    var pluginState = this.getPluginState(); // filter out the one we want to remove\n\n    var newTargets = pluginState.targets.filter(function (target) {\n      return target.id !== plugin.id;\n    });\n    this.setPluginState({\n      targets: newTargets\n    });\n  };\n\n  _proto.addTarget = function addTarget(plugin) {\n    var callerPluginId = plugin.id || plugin.constructor.name;\n    var callerPluginName = plugin.title || callerPluginId;\n    var callerPluginType = plugin.type;\n\n    if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'presenter') {\n      var msg = 'Dashboard: Modal can only be used by plugins of types: acquirer, progressindicator, presenter';\n      this.uppy.log(msg);\n      return;\n    }\n\n    var target = {\n      id: callerPluginId,\n      name: callerPluginName,\n      type: callerPluginType\n    };\n    var state = this.getPluginState();\n    var newTargets = state.targets.slice();\n    newTargets.push(target);\n    this.setPluginState({\n      targets: newTargets\n    });\n    return this.el;\n  };\n\n  _proto.hideAllPanels = function hideAllPanels() {\n    this.setPluginState({\n      activePickerPanel: false,\n      showAddFilesPanel: false,\n      activeOverlayType: null\n    });\n  };\n\n  _proto.showPanel = function showPanel(id) {\n    var _this$getPluginState = this.getPluginState(),\n        targets = _this$getPluginState.targets;\n\n    var activePickerPanel = targets.filter(function (target) {\n      return target.type === 'acquirer' && target.id === id;\n    })[0];\n    this.setPluginState({\n      activePickerPanel: activePickerPanel,\n      activeOverlayType: 'PickerPanel'\n    });\n  };\n\n  _proto.openModal = function openModal() {\n    var _this2 = this;\n\n    var _createPromise = createPromise(),\n        promise = _createPromise.promise,\n        resolve = _createPromise.resolve; // save scroll position\n\n\n    this.savedScrollPosition = window.pageYOffset; // save active element, so we can restore focus when modal is closed\n\n    this.savedActiveElement = document.activeElement;\n\n    if (this.opts.disablePageScrollWhenModalOpen) {\n      document.body.classList.add('uppy-Dashboard-isFixed');\n    }\n\n    if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n      var handler = function handler() {\n        _this2.setPluginState({\n          isHidden: false\n        });\n\n        _this2.el.removeEventListener('animationend', handler, false);\n\n        resolve();\n      };\n\n      this.el.addEventListener('animationend', handler, false);\n    } else {\n      this.setPluginState({\n        isHidden: false\n      });\n      resolve();\n    }\n\n    if (this.opts.browserBackButtonClose) {\n      this.updateBrowserHistory();\n    } // handle ESC and TAB keys in modal dialog\n\n\n    document.addEventListener('keydown', this.handleKeyDownInModal);\n    this.uppy.emit('dashboard:modal-open');\n    return promise;\n  };\n\n  _proto.closeModal = function closeModal(opts) {\n    var _this3 = this;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _opts = opts,\n        _opts$manualClose = _opts.manualClose,\n        manualClose = _opts$manualClose === void 0 ? true : _opts$manualClose;\n\n    var _this$getPluginState2 = this.getPluginState(),\n        isHidden = _this$getPluginState2.isHidden,\n        isClosing = _this$getPluginState2.isClosing;\n\n    if (isHidden || isClosing) {\n      // short-circuit if animation is ongoing\n      return;\n    }\n\n    var _createPromise2 = createPromise(),\n        promise = _createPromise2.promise,\n        resolve = _createPromise2.resolve;\n\n    if (this.opts.disablePageScrollWhenModalOpen) {\n      document.body.classList.remove('uppy-Dashboard-isFixed');\n    }\n\n    if (this.opts.animateOpenClose) {\n      this.setPluginState({\n        isClosing: true\n      });\n\n      var handler = function handler() {\n        _this3.setPluginState({\n          isHidden: true,\n          isClosing: false\n        });\n\n        _this3.superFocus.cancel();\n\n        _this3.savedActiveElement.focus();\n\n        _this3.el.removeEventListener('animationend', handler, false);\n\n        resolve();\n      };\n\n      this.el.addEventListener('animationend', handler, false);\n    } else {\n      this.setPluginState({\n        isHidden: true\n      });\n      this.superFocus.cancel();\n      this.savedActiveElement.focus();\n      resolve();\n    } // handle ESC and TAB keys in modal dialog\n\n\n    document.removeEventListener('keydown', this.handleKeyDownInModal);\n\n    if (manualClose) {\n      if (this.opts.browserBackButtonClose) {\n        // Make sure that the latest entry in the history state is our modal name\n        if (history.state && history.state[this.modalName]) {\n          // Go back in history to clear out the entry we created (ultimately closing the modal)\n          history.go(-1);\n        }\n      }\n    }\n\n    this.uppy.emit('dashboard:modal-closed');\n    return promise;\n  };\n\n  _proto.isModalOpen = function isModalOpen() {\n    return !this.getPluginState().isHidden || false;\n  };\n\n  _proto.requestCloseModal = function requestCloseModal() {\n    if (this.opts.onRequestCloseModal) {\n      return this.opts.onRequestCloseModal();\n    }\n\n    return this.closeModal();\n  };\n\n  _proto.toggleFileCard = function toggleFileCard(fileId) {\n    if (fileId) {\n      this.uppy.emit('dashboard:file-edit-start');\n    } else {\n      this.uppy.emit('dashboard:file-edit-complete');\n    }\n\n    this.setPluginState({\n      fileCardFor: fileId || null,\n      activeOverlayType: fileId ? 'FileCard' : null\n    });\n  };\n\n  _proto.toggleAddFilesPanel = function toggleAddFilesPanel(show) {\n    this.setPluginState({\n      showAddFilesPanel: show,\n      activeOverlayType: show ? 'AddFiles' : null\n    });\n  };\n\n  _proto.addFile = function addFile(file) {\n    try {\n      this.uppy.addFile({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || null\n        }\n      });\n    } catch (err) {\n      if (!err.isRestriction) {\n        this.uppy.log(err);\n      }\n    }\n  } // ___Why make insides of Dashboard invisible until first ResizeObserver event is emitted?\n  //    ResizeOberserver doesn't emit the first resize event fast enough, users can see the jump from one .uppy-size-- to another (e.g. in Safari)\n  // ___Why not apply visibility property to .uppy-Dashboard-inner?\n  //    Because ideally, acc to specs, ResizeObserver should see invisible elements as of width 0. So even though applying invisibility to .uppy-Dashboard-inner works now, it may not work in the future.\n  ;\n\n  _proto.startListeningToResize = function startListeningToResize() {\n    var _this4 = this; // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n    // and update containerWidth/containerHeight in plugin state accordingly.\n    // Emits first event on initialization.\n\n\n    this.resizeObserver = new ResizeObserver(function (entries, observer) {\n      var uppyDashboardInnerEl = entries[0];\n      var _uppyDashboardInnerEl = uppyDashboardInnerEl.contentRect,\n          width = _uppyDashboardInnerEl.width,\n          height = _uppyDashboardInnerEl.height;\n\n      _this4.uppy.log(\"[Dashboard] resized: \" + width + \" / \" + height, 'debug');\n\n      _this4.setPluginState({\n        containerWidth: width,\n        containerHeight: height,\n        areInsidesReadyToBeVisible: true\n      });\n    });\n    this.resizeObserver.observe(this.el.querySelector('.uppy-Dashboard-inner')); // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view\n\n    this.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(function () {\n      var pluginState = _this4.getPluginState();\n\n      var isModalAndClosed = !_this4.opts.inline && pluginState.isHidden;\n\n      if ( // if ResizeObserver hasn't yet fired,\n      !pluginState.areInsidesReadyToBeVisible && // and it's not due to the modal being closed\n      !isModalAndClosed) {\n        _this4.uppy.log(\"[Dashboard] resize event didn't fire on time: defaulted to mobile layout\", 'debug');\n\n        _this4.setPluginState({\n          areInsidesReadyToBeVisible: true\n        });\n      }\n    }, 1000);\n  };\n\n  _proto.stopListeningToResize = function stopListeningToResize() {\n    this.resizeObserver.disconnect();\n    clearTimeout(this.makeDashboardInsidesVisibleAnywayTimeout);\n  } // Records whether we have been interacting with uppy right now, which is then used to determine whether state updates should trigger a refocusing.\n  ;\n\n  _proto.recordIfFocusedOnUppyRecently = function recordIfFocusedOnUppyRecently(event) {\n    if (this.el.contains(event.target)) {\n      this.ifFocusedOnUppyRecently = true;\n    } else {\n      this.ifFocusedOnUppyRecently = false; // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?\n      //    Because superFocus is debounced, when we move from Uppy to some other element on the page,\n      //    previously run superFocus sometimes hits and moves focus back to Uppy.\n\n      this.superFocus.cancel();\n    }\n  };\n\n  _proto.updateBrowserHistory = function updateBrowserHistory() {\n    // Ensure history state does not already contain our modal name to avoid double-pushing\n    if (!history.state || !history.state[this.modalName]) {\n      var _extends2; // Push to history so that the page is not lost on browser back button press\n\n\n      history.pushState(_extends({}, history.state, (_extends2 = {}, _extends2[this.modalName] = true, _extends2)), '');\n    } // Listen for back button presses\n\n\n    window.addEventListener('popstate', this.handlePopState, false);\n  };\n\n  _proto.handlePopState = function handlePopState(event) {\n    // Close the modal if the history state no longer contains our modal name\n    if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n      this.closeModal({\n        manualClose: false\n      });\n    } // When the browser back button is pressed and uppy is now the latest entry in the history but the modal is closed, fix the history by removing the uppy history entry\n    // This occurs when another entry is added into the history state while the modal is open, and then the modal gets manually closed\n    // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n\n\n    if (!this.isModalOpen() && event.state && event.state[this.modalName]) {\n      history.go(-1);\n    }\n  };\n\n  _proto.handleKeyDownInModal = function handleKeyDownInModal(event) {\n    // close modal on esc key press\n    if (event.keyCode === ESC_KEY) this.requestCloseModal(event); // trap focus on tab key press\n\n    if (event.keyCode === TAB_KEY) trapFocus.forModal(event, this.getPluginState().activeOverlayType, this.el);\n  };\n\n  _proto.handleClickOutside = function handleClickOutside() {\n    if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n  };\n\n  _proto.handlePaste = function handlePaste(event) {\n    var _this5 = this; // 1. Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root\n\n\n    this.uppy.iteratePlugins(function (plugin) {\n      if (plugin.type === 'acquirer') {\n        // Every Plugin with .type acquirer can define handleRootPaste(event)\n        plugin.handleRootPaste && plugin.handleRootPaste(event);\n      }\n    }); // 2. Add all dropped files\n\n    var files = toArray(event.clipboardData.files);\n    files.forEach(function (file) {\n      _this5.uppy.log('[Dashboard] File pasted');\n\n      _this5.addFile(file);\n    });\n  };\n\n  _proto.handleInputChange = function handleInputChange(event) {\n    var _this6 = this;\n\n    event.preventDefault();\n    var files = toArray(event.target.files);\n    files.forEach(function (file) {\n      return _this6.addFile(file);\n    });\n  };\n\n  _proto.handleDragOver = function handleDragOver(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this.removeDragOverClassTimeout);\n    this.setPluginState({\n      isDraggingOver: true\n    });\n  };\n\n  _proto.handleDragLeave = function handleDragLeave(event) {\n    var _this7 = this;\n\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library. Solution with 'pointer-events: none' didn't work across browsers.\n\n    this.removeDragOverClassTimeout = setTimeout(function () {\n      _this7.setPluginState({\n        isDraggingOver: false\n      });\n    }, 50);\n  };\n\n  _proto.handleDrop = function handleDrop(event, dropCategory) {\n    var _this8 = this;\n\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this.removeDragOverClassTimeout); // 1. Add a small (+) icon on drop\n\n    event.dataTransfer.dropEffect = 'copy'; // 2. Remove dragover class\n\n    this.setPluginState({\n      isDraggingOver: false\n    }); // 3. Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root\n\n    this.uppy.iteratePlugins(function (plugin) {\n      if (plugin.type === 'acquirer') {\n        // Every Plugin with .type acquirer can define handleRootDrop(event)\n        plugin.handleRootDrop && plugin.handleRootDrop(event);\n      }\n    }); // 4. Add all dropped files\n\n    var executedDropErrorOnce = false;\n\n    var logDropError = function logDropError(error) {\n      _this8.uppy.log(error, 'error'); // In practice all drop errors are most likely the same, so let's just show one to avoid overwhelming the user\n\n\n      if (!executedDropErrorOnce) {\n        _this8.uppy.info(error.message, 'error');\n\n        executedDropErrorOnce = true;\n      }\n    };\n\n    getDroppedFiles(event.dataTransfer, {\n      logDropError: logDropError\n    }).then(function (files) {\n      if (files.length > 0) {\n        _this8.uppy.log('[Dashboard] Files were dropped');\n\n        files.forEach(function (file) {\n          return _this8.addFile(file);\n        });\n      }\n    });\n  };\n\n  _proto.handleKeyDownInInline = function handleKeyDownInInline(event) {\n    // Trap focus on tab key press.\n    if (event.keyCode === TAB_KEY) trapFocus.forInline(event, this.getPluginState().activeOverlayType, this.el);\n  } // ___Why do we listen to the 'paste' event on a document instead of onPaste={props.handlePaste} prop, or this.el.addEventListener('paste')?\n  //    Because (at least) Chrome doesn't handle paste if focus is on some button, e.g. 'My Device'.\n  //    => Therefore, the best option is to listen to all 'paste' events, and only react to them when we are focused on our particular Uppy instance.\n  // ___Why do we still need onPaste={props.handlePaste} for the DashboardUi?\n  //    Because if we click on the 'Drop files here' caption e.g., `document.activeElement` will be 'body'. Which means our standard determination of whether we're pasting into our Uppy instance won't work.\n  //    => Therefore, we need a traditional onPaste={props.handlePaste} handler too.\n  ;\n\n  _proto.handlePasteOnBody = function handlePasteOnBody(event) {\n    var isFocusInOverlay = this.el.contains(document.activeElement);\n\n    if (isFocusInOverlay) {\n      this.handlePaste(event);\n    }\n  };\n\n  _proto.handleComplete = function handleComplete(_ref) {\n    var failed = _ref.failed,\n        uploadID = _ref.uploadID;\n\n    if (this.opts.closeAfterFinish && failed.length === 0) {\n      // All uploads are done\n      this.requestCloseModal();\n    }\n  };\n\n  _proto.initEvents = function initEvents() {\n    var _this9 = this; // Modal open button\n\n\n    var showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n    if (!this.opts.inline && showModalTrigger) {\n      showModalTrigger.forEach(function (trigger) {\n        return trigger.addEventListener('click', _this9.openModal);\n      });\n    }\n\n    if (!this.opts.inline && !showModalTrigger) {\n      this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options unless you are planning to call openModal() method yourself', 'error');\n    }\n\n    this.startListeningToResize();\n    document.addEventListener('paste', this.handlePasteOnBody);\n    this.uppy.on('plugin-remove', this.removeTarget);\n    this.uppy.on('file-added', this.hideAllPanels);\n    this.uppy.on('dashboard:modal-closed', this.hideAllPanels);\n    this.uppy.on('complete', this.handleComplete); // ___Why fire on capture?\n    //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.\n\n    document.addEventListener('focus', this.recordIfFocusedOnUppyRecently, true);\n    document.addEventListener('click', this.recordIfFocusedOnUppyRecently, true);\n\n    if (this.opts.inline) {\n      this.el.addEventListener('keydown', this.handleKeyDownInInline);\n    }\n  };\n\n  _proto.removeEvents = function removeEvents() {\n    var _this10 = this;\n\n    var showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n    if (!this.opts.inline && showModalTrigger) {\n      showModalTrigger.forEach(function (trigger) {\n        return trigger.removeEventListener('click', _this10.openModal);\n      });\n    }\n\n    this.stopListeningToResize();\n    document.removeEventListener('paste', this.handlePasteOnBody);\n    window.removeEventListener('popstate', this.handlePopState, false);\n    this.uppy.off('plugin-remove', this.removeTarget);\n    this.uppy.off('file-added', this.hideAllPanels);\n    this.uppy.off('dashboard:modal-closed', this.hideAllPanels);\n    this.uppy.off('complete', this.handleComplete);\n    document.removeEventListener('focus', this.recordIfFocusedOnUppyRecently);\n    document.removeEventListener('click', this.recordIfFocusedOnUppyRecently);\n\n    if (this.opts.inline) {\n      this.el.removeEventListener('keydown', this.handleKeyDownInInline);\n    }\n  };\n\n  _proto.superFocusOnEachUpdate = function superFocusOnEachUpdate() {\n    var isFocusInUppy = this.el.contains(document.activeElement); // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)\n\n    var isFocusNowhere = document.activeElement === document.querySelector('body') || document.activeElement === null;\n    var isInformerHidden = this.uppy.getState().info.isHidden;\n    var isModal = !this.opts.inline;\n\n    if ( // If update is connected to showing the Informer - let the screen reader calmly read it.\n    isInformerHidden && ( // If we are in a modal - always superfocus without concern for other elements on the page (user is unlikely to want to interact with the rest of the page)\n    isModal || // If we are already inside of Uppy, or\n    isFocusInUppy || // If we are not focused on anything BUT we have already, at least once, focused on uppy\n    //   1. We focus when isFocusNowhere, because when the element we were focused on disappears (e.g. an overlay), - focus gets lost. If user is typing something somewhere else on the page, - focus won't be 'nowhere'.\n    //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently, to avoid focus jumps if we do something else on the page.\n    //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode, when file is uploading, - navigate via tab to the checkbox, try to press space multiple times. Focus will jump to Uppy.\n    isFocusNowhere && this.ifFocusedOnUppyRecently)) {\n      this.superFocus(this.el, this.getPluginState().activeOverlayType);\n    } else {\n      this.superFocus.cancel();\n    }\n  };\n\n  _proto.afterUpdate = function afterUpdate() {\n    this.superFocusOnEachUpdate();\n  };\n\n  _proto.render = function render(state) {\n    var pluginState = this.getPluginState();\n    var files = state.files,\n        capabilities = state.capabilities,\n        allowNewUpload = state.allowNewUpload; // TODO: move this to Core, to share between Status Bar and Dashboard\n    // (and any other plugin that might need it, too)\n\n    var newFiles = Object.keys(files).filter(function (file) {\n      return !files[file].progress.uploadStarted;\n    });\n    var uploadStartedFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.uploadStarted;\n    });\n    var pausedFiles = Object.keys(files).filter(function (file) {\n      return files[file].isPaused;\n    });\n    var completeFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.uploadComplete;\n    });\n    var erroredFiles = Object.keys(files).filter(function (file) {\n      return files[file].error;\n    });\n    var inProgressFiles = Object.keys(files).filter(function (file) {\n      return !files[file].progress.uploadComplete && files[file].progress.uploadStarted;\n    });\n    var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {\n      return !files[file].isPaused;\n    });\n    var processingFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.preprocess || files[file].progress.postprocess;\n    });\n    var isUploadStarted = uploadStartedFiles.length > 0;\n    var isAllComplete = state.totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;\n    var isAllErrored = isUploadStarted && erroredFiles.length === uploadStartedFiles.length;\n    var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length;\n\n    var acquirers = this._getAcquirers(pluginState.targets);\n\n    var progressindicators = this._getProgressIndicators(pluginState.targets);\n\n    return DashboardUI({\n      state: state,\n      isHidden: pluginState.isHidden,\n      files: files,\n      newFiles: newFiles,\n      uploadStartedFiles: uploadStartedFiles,\n      completeFiles: completeFiles,\n      erroredFiles: erroredFiles,\n      inProgressFiles: inProgressFiles,\n      inProgressNotPausedFiles: inProgressNotPausedFiles,\n      processingFiles: processingFiles,\n      isUploadStarted: isUploadStarted,\n      isAllComplete: isAllComplete,\n      isAllErrored: isAllErrored,\n      isAllPaused: isAllPaused,\n      totalFileCount: Object.keys(files).length,\n      totalProgress: state.totalProgress,\n      allowNewUpload: allowNewUpload,\n      acquirers: acquirers,\n      activePickerPanel: pluginState.activePickerPanel,\n      animateOpenClose: this.opts.animateOpenClose,\n      isClosing: pluginState.isClosing,\n      getPlugin: this.uppy.getPlugin,\n      progressindicators: progressindicators,\n      autoProceed: this.uppy.opts.autoProceed,\n      id: this.id,\n      closeModal: this.requestCloseModal,\n      handleClickOutside: this.handleClickOutside,\n      handleInputChange: this.handleInputChange,\n      handlePaste: this.handlePaste,\n      inline: this.opts.inline,\n      showPanel: this.showPanel,\n      hideAllPanels: this.hideAllPanels,\n      log: this.uppy.log,\n      i18n: this.i18n,\n      i18nArray: this.i18nArray,\n      addFile: this.uppy.addFile,\n      removeFile: this.uppy.removeFile,\n      info: this.uppy.info,\n      note: this.opts.note,\n      metaFields: pluginState.metaFields,\n      resumableUploads: capabilities.resumableUploads || false,\n      individualCancellation: capabilities.individualCancellation,\n      pauseUpload: this.uppy.pauseResume,\n      retryUpload: this.uppy.retryUpload,\n      cancelUpload: this.cancelUpload,\n      cancelAll: this.uppy.cancelAll,\n      fileCardFor: pluginState.fileCardFor,\n      toggleFileCard: this.toggleFileCard,\n      toggleAddFilesPanel: this.toggleAddFilesPanel,\n      showAddFilesPanel: pluginState.showAddFilesPanel,\n      saveFileCard: this.saveFileCard,\n      width: this.opts.width,\n      height: this.opts.height,\n      showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n      proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n      containerWidth: pluginState.containerWidth,\n      areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,\n      isTargetDOMEl: this.isTargetDOMEl,\n      parentElement: this.el,\n      allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n      maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n      showSelectedFiles: this.opts.showSelectedFiles,\n      // drag props\n      isDraggingOver: pluginState.isDraggingOver,\n      handleDragOver: this.handleDragOver,\n      handleDragLeave: this.handleDragLeave,\n      handleDrop: this.handleDrop\n    });\n  };\n\n  _proto.discoverProviderPlugins = function discoverProviderPlugins() {\n    var _this11 = this;\n\n    this.uppy.iteratePlugins(function (plugin) {\n      if (plugin && !plugin.target && plugin.opts && plugin.opts.target === _this11.constructor) {\n        _this11.addTarget(plugin);\n      }\n    });\n  };\n\n  _proto.install = function install() {\n    var _this12 = this; // Set default state for Dashboard\n\n\n    this.setPluginState({\n      isHidden: true,\n      fileCardFor: null,\n      activeOverlayType: null,\n      showAddFilesPanel: false,\n      activePickerPanel: false,\n      metaFields: this.opts.metaFields,\n      targets: [],\n      // We'll make them visible once .containerWidth is determined\n      areInsidesReadyToBeVisible: false,\n      isDraggingOver: false\n    });\n    var _this$opts = this.opts,\n        inline = _this$opts.inline,\n        closeAfterFinish = _this$opts.closeAfterFinish;\n\n    if (inline && closeAfterFinish) {\n      throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n    }\n\n    var allowMultipleUploads = this.uppy.opts.allowMultipleUploads;\n\n    if (allowMultipleUploads && closeAfterFinish) {\n      this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploads` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n    }\n\n    var target = this.opts.target;\n\n    if (target) {\n      this.mount(target, this);\n    }\n\n    var plugins = this.opts.plugins || [];\n    plugins.forEach(function (pluginID) {\n      var plugin = _this12.uppy.getPlugin(pluginID);\n\n      if (plugin) {\n        plugin.mount(_this12, plugin);\n      }\n    });\n\n    if (!this.opts.disableStatusBar) {\n      this.uppy.use(StatusBar, {\n        id: this.id + \":StatusBar\",\n        target: this,\n        hideUploadButton: this.opts.hideUploadButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        hideCancelButton: this.opts.hideCancelButton,\n        showProgressDetails: this.opts.showProgressDetails,\n        hideAfterFinish: this.opts.hideProgressAfterFinish,\n        locale: this.opts.locale\n      });\n    }\n\n    if (!this.opts.disableInformer) {\n      this.uppy.use(Informer, {\n        id: this.id + \":Informer\",\n        target: this\n      });\n    }\n\n    if (!this.opts.disableThumbnailGenerator) {\n      this.uppy.use(ThumbnailGenerator, {\n        id: this.id + \":ThumbnailGenerator\",\n        thumbnailWidth: this.opts.thumbnailWidth,\n        waitForThumbnailsBeforeUpload: this.opts.waitForThumbnailsBeforeUpload\n      });\n    }\n\n    this.discoverProviderPlugins();\n    this.initEvents();\n  };\n\n  _proto.uninstall = function uninstall() {\n    var _this13 = this;\n\n    if (!this.opts.disableInformer) {\n      var informer = this.uppy.getPlugin(this.id + \":Informer\"); // Checking if this plugin exists, in case it was removed by uppy-core\n      // before the Dashboard was.\n\n      if (informer) this.uppy.removePlugin(informer);\n    }\n\n    if (!this.opts.disableStatusBar) {\n      var statusBar = this.uppy.getPlugin(this.id + \":StatusBar\");\n      if (statusBar) this.uppy.removePlugin(statusBar);\n    }\n\n    if (!this.opts.disableThumbnailGenerator) {\n      var thumbnail = this.uppy.getPlugin(this.id + \":ThumbnailGenerator\");\n      if (thumbnail) this.uppy.removePlugin(thumbnail);\n    }\n\n    var plugins = this.opts.plugins || [];\n    plugins.forEach(function (pluginID) {\n      var plugin = _this13.uppy.getPlugin(pluginID);\n\n      if (plugin) plugin.unmount();\n    });\n    this.unmount();\n    this.removeEvents();\n  };\n\n  return Dashboard;\n}(Plugin), _class.VERSION = \"1.4.1\", _temp);","map":null,"metadata":{},"sourceType":"script"}