{"ast":null,"code":"import _slicedToArray from \"/Users/biswa/Sites/Others/demo/Isomorphic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/UIElements/Tree/BasicControlledTree.js\";\nimport React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n  const children = [];\n\n  for (let i = 0; i < x; i++) {\n    const key = \"\".concat(preKey, \"-\").concat(i);\n    tns.push({\n      title: key,\n      key\n    });\n\n    if (i < y) {\n      children.push(key);\n    }\n  }\n\n  if (_level < 0) {\n    return tns;\n  }\n\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\n\ngenerateData(z);\nexport default function () {\n  const _React$useState = React.useState(['0-0-0', '0-0-1']),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        expandedKeys = _React$useState2[0],\n        setExpandedKeys = _React$useState2[1];\n\n  const _React$useState3 = React.useState(true),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        autoExpandParent = _React$useState4[0],\n        setAutoExpandParent = _React$useState4[1];\n\n  const _React$useState5 = React.useState(['0-0-0']),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        checkedKeys = _React$useState6[0],\n        setCheckedKeys = _React$useState6[1];\n\n  const _React$useState7 = React.useState([]),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        selectedKeys = _React$useState8[0],\n        setSelectedKeys = _React$useState8[1];\n\n  const onExpand = expandedKeys => {\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n\n  const onCheck = checkedKeys => {\n    setCheckedKeys(checkedKeys);\n    setSelectedKeys(['0-3', '0-4']);\n  };\n\n  const onSelect = (selectedKeys, info) => {\n    setSelectedKeys(selectedKeys);\n  };\n\n  const loop = data => data.map(item => {\n    if (item.children) {\n      return React.createElement(TreeNode, {\n        key: item.key,\n        title: item.key,\n        disableCheckbox: item.key === '0-0-0',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, loop(item.children));\n    }\n\n    return React.createElement(TreeNode, {\n      key: item.key,\n      title: item.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n  });\n\n  return React.createElement(Tree, {\n    checkable: true,\n    onExpand: onExpand,\n    expandedKeys: expandedKeys,\n    autoExpandParent: autoExpandParent,\n    onCheck: onCheck,\n    checkedKeys: checkedKeys,\n    onSelect: onSelect,\n    selectedKeys: selectedKeys,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, loop(gData));\n}","map":{"version":3,"sources":["/Users/biswa/Sites/Others/demo/Isomorphic/shared/containers/UIElements/Tree/BasicControlledTree.js"],"names":["React","Tree","TreeNode","x","y","z","gData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","title","level","forEach","index","useState","expandedKeys","setExpandedKeys","autoExpandParent","setAutoExpandParent","checkedKeys","setCheckedKeys","selectedKeys","setSelectedKeys","onExpand","onCheck","onSelect","info","loop","data","map","item"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tree, { TreeNode } from '@iso/components/uielements/tree';\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nexport default function() {\n  const [expandedKeys, setExpandedKeys] = React.useState(['0-0-0', '0-0-1']);\n  const [autoExpandParent, setAutoExpandParent] = React.useState(true);\n  const [checkedKeys, setCheckedKeys] = React.useState(['0-0-0']);\n  const [selectedKeys, setSelectedKeys] = React.useState([]);\n\n  const onExpand = expandedKeys => {\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n  const onCheck = checkedKeys => {\n    setCheckedKeys(checkedKeys);\n    setSelectedKeys(['0-3', '0-4']);\n  };\n  const onSelect = (selectedKeys, info) => {\n    setSelectedKeys(selectedKeys);\n  };\n  const loop = data =>\n    data.map(item => {\n      if (item.children) {\n        return (\n          <TreeNode\n            key={item.key}\n            title={item.key}\n            disableCheckbox={item.key === '0-0-0'}\n          >\n            {loop(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} title={item.key} />;\n    });\n  return (\n    <Tree\n      checkable\n      onExpand={onExpand}\n      expandedKeys={expandedKeys}\n      autoExpandParent={autoExpandParent}\n      onCheck={onCheck}\n      checkedKeys={checkedKeys}\n      onSelect={onSelect}\n      selectedKeys={selectedKeys}\n    >\n      {loop(gData)}\n    </Tree>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}